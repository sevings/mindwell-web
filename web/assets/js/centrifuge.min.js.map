{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///centrifuge.min.js","webpack:///webpack/bootstrap 252f1caf800245971920","webpack:///./src/centrifuge.js","webpack:///./src/subscription.js","webpack:///./src/json.js","webpack:///(webpack)/buildin/global.js","webpack:///./src/index.js","webpack:///./node_modules/events/events.js","webpack:///./src/utils.js"],"names":["root","factory","exports","module","define","amd","self","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","10","global","_interopRequireDefault","obj","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","ReferenceError","_inherits","subClass","superClass","create","constructor","value","writable","setPrototypeOf","__proto__","Centrifuge","undefined","_typeof","Symbol","iterator","_createClass","defineProperties","target","props","length","descriptor","key","protoProps","staticProps","_events","_events2","_subscription","_subscription2","_json","_utils","_EventEmitter","url","options","_this","getPrototypeOf","_url","_sockjs","_isSockjs","_binary","_methodType","_pushType","_encoder","_decoder","_status","_reconnect","_reconnecting","_transport","_transportName","_transportClosed","_messageId","_clientID","_refreshRequired","_subs","_lastSeq","_lastGen","_lastEpoch","_messages","_isBatching","_isSubscribeBatching","_privateChannels","_numRefreshFailed","_refreshTimeout","_pingTimeout","_pongTimeout","_subRefreshTimeouts","_retries","_callbacks","_latency","_latencyStart","_connectData","_token","_config","debug","sockjs","promise","minRetry","maxRetry","timeout","ping","pingInterval","pongWaitTimeout","privateChannelPrefix","onTransportClose","sockjsServer","sockjsTransports","refreshEndpoint","refreshHeaders","refreshParams","refreshData","refreshAttempts","refreshInterval","onRefreshFailed","onRefresh","subscribeEndpoint","subscribeHeaders","subscribeParams","subRefreshInterval","onPrivateSubscribe","_configure","token","data","params","headers","callback","_this2","query","_debug","JSON","stringify","xhr","XMLHttpRequest","ActiveXObject","encodeURIComponent","open","withCredentials","setRequestHeader","headerName","onreadystatechange","readyState","status","parsed","parse","responseText","e","error","_log","setTimeout","send","log","arguments","WebSocket","format","_formatOverride","Error","JsonMethodType","JsonPushType","JsonEncoder","JsonDecoder","configuration","assign","startsWith","indexOf","_setFormat","SockJS","newStatus","interval","backoff","reconnect","_stopPing","id","callbacks","clearTimeout","errback","_createErrorObject","channel","sub","_isSuccess","_triggerUnsubscribe","_recover","_setSubscribing","_setUnsubscribed","_clearSubRefreshTimeout","commands","encodeCommands","_this3","sockjsOptions","transports","server","_websocketSupported","binaryType","onopen","transport","onheartbeat","_restartPing","msg","Date","_call","then","result","_connectResponse","decodeCommandResult","CONNECT","next","err","code","_disconnect","onerror","onclose","closeEvent","reason","needReconnect","advice","event","_getRetryInterval","_refresh","_connect","onmessage","_dataReceived","_this4","method","RPC","SEND","_callAsync","_this5","replies","decodeReplies","Promise","resolve","_dispatchReply","_addMessage","_this6","reject","_registerCall","isConnected","_setStatus","_setupTransport","shouldReconnect","_isDisconnected","_clearConnectedState","emit","close","_this7","_refreshFailed","cb","resp","jitter","Math","round","random","max","REFRESH","_refreshResponse","_refreshError","context","_ajax","_this8","_this9","expires","client","ttl","_this10","channelsData","channels","channelData","SUB_REFRESH","_getSub","_subRefreshResponse","_subRefreshError","_this11","subRefreshTimeout","_subRefresh","_this12","isResubscribe","_this13","_setNew","SUBSCRIBE","startSubscribeBatching","_subscribe","stopSubscribeBatching","_needRecover","recover","seq","_getLastSeq","gen","_getLastGen","epoch","_getLastEpoch","_subscribeResponse","_subscribeError","UNSUBSCRIBE","_this14","wasReconnecting","_resetRetry","getTime","startBatching","_shouldResubscribe","stopBatching","_startPing","ctx","latency","_this15","_isSubscribing","message","_setSubscribeError","_this16","recovered","_setSubscribeSuccess","pubs","publications","reverse","_handlePublication","recoverable","_recoverable","reply","errorExists","join","leave","unsub","unsubscribe","resubscribe","subscribe","pub","push","decodePush","type","PUBLICATION","decodePushData","MESSAGE","_handleMessage","JOIN","_handleJoin","LEAVE","_handleLeave","UNSUB","_handleUnsub","_handleReply","_handlePush","messages","slice","_transportSend","_this17","PING","_pingResponse","lastSeq","lastGen","lastEpoch","_this18","isFunction","async","_nextMessageId","_isConnected","_ping","_flush","_this19","authChannels","batch","_ret2","events","currentSub","_setEvents","_isUnsubscribed","11","_STATE_NEW","Subscription","centrifuge","_centrifuge","_error","_isResubscribe","_ready","_subscriptionPromise","_noResubscribe","_initializePromise","_promises","on","errContext","_resolve","_reject","toString","knownEvents","ev","successContext","_getSubscribeSuccessContext","to","_getSubscribeErrorContext","noResubscribe","needTrigger","subscribeErrorContext","_unsubscribe","subPromise","_isError","res","rej","_methodCall","PUBLISH","PRESENCE","PRESENCE_STATS","HISTORY","12","encodedCommands","encodedReplies","split","methodType","pushType","3","g","Function","eval","window","31","6","EventEmitter","_maxListeners","arg","isNumber","isObject","isUndefined","defaultMaxListeners","setMaxListeners","isNaN","er","handler","len","args","listeners","Array","apply","addListener","listener","newListener","warned","console","trace","once","removeListener","fired","list","position","splice","removeAllListeners","listenerCount","evlistener","emitter","7","prefix","lastIndexOf","level","logger","step","min","pow","floor"],"mappings":"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","file":"centrifuge.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Centrifuge\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Centrifuge\"] = factory();\n\telse\n\t\troot[\"Centrifuge\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Centrifuge\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Centrifuge\"] = factory();\n\telse\n\t\troot[\"Centrifuge\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 31);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 10:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Centrifuge = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _events = __webpack_require__(6);\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _subscription = __webpack_require__(11);\n\nvar _subscription2 = _interopRequireDefault(_subscription);\n\nvar _json = __webpack_require__(12);\n\nvar _utils = __webpack_require__(7);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _errorTimeout = 'timeout';\n\nvar Centrifuge = exports.Centrifuge = function (_EventEmitter) {\n  _inherits(Centrifuge, _EventEmitter);\n\n  function Centrifuge(url, options) {\n    _classCallCheck(this, Centrifuge);\n\n    var _this = _possibleConstructorReturn(this, (Centrifuge.__proto__ || Object.getPrototypeOf(Centrifuge)).call(this));\n\n    _this._url = url;\n    _this._sockjs = null;\n    _this._isSockjs = false;\n    _this._binary = false;\n    _this._methodType = null;\n    _this._pushType = null;\n    _this._encoder = null;\n    _this._decoder = null;\n    _this._status = 'disconnected';\n    _this._reconnect = true;\n    _this._reconnecting = false;\n    _this._transport = null;\n    _this._transportName = null;\n    _this._transportClosed = true;\n    _this._messageId = 0;\n    _this._clientID = null;\n    _this._refreshRequired = false;\n    _this._subs = {};\n    _this._lastSeq = {};\n    _this._lastGen = {};\n    _this._lastEpoch = {};\n    _this._messages = [];\n    _this._isBatching = false;\n    _this._isSubscribeBatching = false;\n    _this._privateChannels = {};\n    _this._numRefreshFailed = 0;\n    _this._refreshTimeout = null;\n    _this._pingTimeout = null;\n    _this._pongTimeout = null;\n    _this._subRefreshTimeouts = {};\n    _this._retries = 0;\n    _this._callbacks = {};\n    _this._latency = null;\n    _this._latencyStart = null;\n    _this._connectData = null;\n    _this._token = null;\n    _this._config = {\n      debug: false,\n      sockjs: null,\n      promise: null,\n      minRetry: 1000,\n      maxRetry: 20000,\n      timeout: 5000,\n      ping: true,\n      pingInterval: 25000,\n      pongWaitTimeout: 5000,\n      privateChannelPrefix: '$',\n      onTransportClose: null,\n      sockjsServer: null,\n      sockjsTransports: ['websocket', 'xdr-streaming', 'xhr-streaming', 'eventsource', 'iframe-eventsource', 'iframe-htmlfile', 'xdr-polling', 'xhr-polling', 'iframe-xhr-polling', 'jsonp-polling'],\n      refreshEndpoint: '/centrifuge/refresh',\n      refreshHeaders: {},\n      refreshParams: {},\n      refreshData: {},\n      refreshAttempts: null,\n      refreshInterval: 1000,\n      onRefreshFailed: null,\n      onRefresh: null,\n      subscribeEndpoint: '/centrifuge/subscribe',\n      subscribeHeaders: {},\n      subscribeParams: {},\n      subRefreshInterval: 1000,\n      onPrivateSubscribe: null\n    };\n    _this._configure(options);\n    return _this;\n  }\n\n  _createClass(Centrifuge, [{\n    key: 'setToken',\n    value: function setToken(token) {\n      this._token = token;\n    }\n  }, {\n    key: 'setConnectData',\n    value: function setConnectData(data) {\n      this._connectData = data;\n    }\n  }, {\n    key: '_ajax',\n    value: function _ajax(url, params, headers, data, callback) {\n      var _this2 = this;\n\n      var query = '';\n      this._debug('sending AJAX request to', url, 'with data', JSON.stringify(data));\n\n      var xhr = global.XMLHttpRequest ? new global.XMLHttpRequest() : new global.ActiveXObject('Microsoft.XMLHTTP');\n\n      for (var i in params) {\n        if (params.hasOwnProperty(i)) {\n          if (query.length > 0) {\n            query += '&';\n          }\n          query += encodeURIComponent(i) + '=' + encodeURIComponent(params[i]);\n        }\n      }\n      if (query.length > 0) {\n        query = '?' + query;\n      }\n      xhr.open('POST', url + query, true);\n      if ('withCredentials' in xhr) {\n        xhr.withCredentials = true;\n      }\n\n      xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n      xhr.setRequestHeader('Content-Type', 'application/json');\n      for (var headerName in headers) {\n        if (headers.hasOwnProperty(headerName)) {\n          xhr.setRequestHeader(headerName, headers[headerName]);\n        }\n      }\n\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            var _data = void 0,\n                parsed = false;\n            try {\n              _data = JSON.parse(xhr.responseText);\n              parsed = true;\n            } catch (e) {\n              callback({\n                error: 'Invalid JSON. Data was: ' + xhr.responseText,\n                status: 200,\n                data: null\n              });\n            }\n            if (parsed) {\n              // prevents double execution.\n              callback({\n                data: _data,\n                status: 200\n              });\n            }\n          } else {\n            _this2._log('wrong status code in AJAX response', xhr.status);\n            callback({\n              status: xhr.status,\n              data: null\n            });\n          }\n        }\n      };\n      setTimeout(function () {\n        return xhr.send(JSON.stringify(data));\n      }, 20);\n      return xhr;\n    }\n  }, {\n    key: '_log',\n    value: function _log() {\n      (0, _utils.log)('info', arguments);\n    }\n  }, {\n    key: '_debug',\n    value: function _debug() {\n      if (this._config.debug === true) {\n        (0, _utils.log)('debug', arguments);\n      }\n    }\n  }, {\n    key: '_websocketSupported',\n    value: function _websocketSupported() {\n      return !(typeof WebSocket !== 'function' && (typeof WebSocket === 'undefined' ? 'undefined' : _typeof(WebSocket)) !== 'object');\n    }\n  }, {\n    key: '_setFormat',\n    value: function _setFormat(format) {\n      if (this._formatOverride(format)) {\n        return;\n      }\n      if (format === 'protobuf') {\n        throw new Error('not implemented by JSON only Centrifuge client – use client with Protobuf');\n      }\n      this._binary = false;\n      this._methodType = _json.JsonMethodType;\n      this._pushType = _json.JsonPushType;\n      this._encoder = new _json.JsonEncoder();\n      this._decoder = new _json.JsonDecoder();\n    }\n  }, {\n    key: '_formatOverride',\n    value: function _formatOverride(format) {\n      return false;\n    }\n  }, {\n    key: '_configure',\n    value: function _configure(configuration) {\n      if (!('Promise' in global)) {\n        throw new Error('Promise polyfill required');\n      }\n\n      Object.assign(this._config, configuration || {});\n      this._debug('centrifuge config', this._config);\n\n      if (!this._url) {\n        throw new Error('url required');\n      }\n\n      if ((0, _utils.startsWith)(this._url, 'ws') && this._url.indexOf('format=protobuf') > -1) {\n        this._setFormat('protobuf');\n      } else {\n        this._setFormat('json');\n      }\n\n      if ((0, _utils.startsWith)(this._url, 'http')) {\n        this._debug('client will try to connect to SockJS endpoint');\n        if (this._config.sockjs !== null) {\n          this._debug('SockJS explicitly provided in options');\n          this._sockjs = this._config.sockjs;\n        } else {\n          if (typeof global.SockJS === 'undefined') {\n            throw new Error('SockJS not found, use ws:// in url or include SockJS');\n          }\n          this._debug('use globally defined SockJS');\n          this._sockjs = global.SockJS;\n        }\n      } else {\n        this._debug('client will connect to websocket endpoint');\n      }\n    }\n  }, {\n    key: '_setStatus',\n    value: function _setStatus(newStatus) {\n      if (this._status !== newStatus) {\n        this._debug('Status', this._status, '->', newStatus);\n        this._status = newStatus;\n      }\n    }\n  }, {\n    key: '_isDisconnected',\n    value: function _isDisconnected() {\n      return this._status === 'disconnected';\n    }\n  }, {\n    key: '_isConnecting',\n    value: function _isConnecting() {\n      return this._status === 'connecting';\n    }\n  }, {\n    key: '_isConnected',\n    value: function _isConnected() {\n      return this._status === 'connected';\n    }\n  }, {\n    key: '_nextMessageId',\n    value: function _nextMessageId() {\n      return ++this._messageId;\n    }\n  }, {\n    key: '_resetRetry',\n    value: function _resetRetry() {\n      this._debug('reset retries count to 0');\n      this._retries = 0;\n    }\n  }, {\n    key: '_getRetryInterval',\n    value: function _getRetryInterval() {\n      var interval = (0, _utils.backoff)(this._retries, this._config.minRetry, this._config.maxRetry);\n\n      this._retries += 1;\n      return interval;\n    }\n  }, {\n    key: '_clearConnectedState',\n    value: function _clearConnectedState(reconnect) {\n      this._clientID = null;\n      this._stopPing();\n\n      // fire errbacks of registered outgoing calls.\n      for (var id in this._callbacks) {\n        if (this._callbacks.hasOwnProperty(id)) {\n          var callbacks = this._callbacks[id];\n          clearTimeout(callbacks.timeout);\n          var errback = callbacks.errback;\n          if (!errback) {\n            continue;\n          }\n          errback(this._createErrorObject('disconnected'));\n        }\n      }\n      this._callbacks = {};\n\n      // fire unsubscribe events\n      for (var channel in this._subs) {\n        if (this._subs.hasOwnProperty(channel)) {\n          var sub = this._subs[channel];\n\n          if (reconnect) {\n            if (sub._isSuccess()) {\n              sub._triggerUnsubscribe();\n              sub._recover = true;\n            }\n            sub._setSubscribing();\n          } else {\n            sub._setUnsubscribed();\n          }\n        }\n      }\n\n      // clear refresh timer\n      if (this._refreshTimeout !== null) {\n        clearTimeout(this._refreshTimeout);\n        this._refreshTimeout = null;\n      }\n\n      // clear sub refresh timers\n      for (var _channel in this._subRefreshTimeouts) {\n        if (this._subRefreshTimeouts.hasOwnProperty(_channel) && this._subRefreshTimeouts[_channel]) {\n          this._clearSubRefreshTimeout(_channel);\n        }\n      }\n      this._subRefreshTimeouts = {};\n\n      if (!this._reconnect) {\n        // completely clear subscriptions\n        this._subs = {};\n      }\n    }\n  }, {\n    key: '_transportSend',\n    value: function _transportSend(commands) {\n      if (!commands.length) {\n        return;\n      }\n      if (!this._transport) {\n        throw new Error('transport not connected');\n      }\n      this._transport.send(this._encoder.encodeCommands(commands));\n    }\n  }, {\n    key: '_setupTransport',\n    value: function _setupTransport() {\n      var _this3 = this;\n\n      this._isSockjs = false;\n\n      // detect transport to use - SockJS or Websocket\n      if (this._sockjs !== null) {\n        var sockjsOptions = {\n          transports: this._config.sockjsTransports\n        };\n\n        if (this._config.sockjsServer !== null) {\n          sockjsOptions.server = this._config.sockjsServer;\n        }\n        this._isSockjs = true;\n        this._transport = new this._sockjs(this._url, null, sockjsOptions);\n      } else {\n        if (!this._websocketSupported()) {\n          this._debug('No Websocket support and no SockJS configured, can not connect');\n          return;\n        }\n        this._transport = new WebSocket(this._url);\n        if (this._binary === true) {\n          this._transport.binaryType = 'arraybuffer';\n        }\n      }\n\n      this._transport.onopen = function () {\n        _this3._transportClosed = false;\n\n        if (_this3._isSockjs) {\n          _this3._transportName = 'sockjs-' + _this3._transport.transport;\n          _this3._transport.onheartbeat = function () {\n            return _this3._restartPing();\n          };\n        } else {\n          _this3._transportName = 'websocket';\n        }\n\n        // Can omit method here due to zero value.\n        var msg = {\n          // method: this._methodType.CONNECT\n        };\n\n        if (_this3._token || _this3._connectData) {\n          msg.params = {};\n        }\n\n        if (_this3._token) {\n          msg.params.token = _this3._token;\n        }\n\n        if (_this3._connectData) {\n          msg.params.data = _this3._connectData;\n        }\n\n        _this3._latencyStart = new Date();\n        _this3._call(msg).then(function (result) {\n          _this3._connectResponse(_this3._decoder.decodeCommandResult(_this3._methodType.CONNECT, result.result));\n          if (result.next) {\n            result.next();\n          }\n        }, function (err) {\n          if (err.code === 109) {\n            // token expired.\n            _this3._refreshRequired = true;\n          }\n          _this3._disconnect('connect error', true);\n        });\n      };\n\n      this._transport.onerror = function (error) {\n        _this3._debug('transport level error', error);\n      };\n\n      this._transport.onclose = function (closeEvent) {\n        _this3._transportClosed = true;\n        var reason = 'connection closed';\n        var needReconnect = true;\n\n        if (closeEvent && 'reason' in closeEvent && closeEvent.reason) {\n          try {\n            var advice = JSON.parse(closeEvent.reason);\n            _this3._debug('reason is an advice object', advice);\n            reason = advice.reason;\n            needReconnect = advice.reconnect;\n          } catch (e) {\n            reason = closeEvent.reason;\n            _this3._debug('reason is a plain string', reason);\n          }\n        }\n\n        // onTransportClose callback should be executed every time transport was closed.\n        // This can be helpful to catch failed connection events (because our disconnect\n        // event only called once and every future attempts to connect do not fire disconnect\n        // event again).\n        if (_this3._config.onTransportClose !== null) {\n          _this3._config.onTransportClose({\n            event: closeEvent,\n            reason: reason,\n            reconnect: needReconnect\n          });\n        }\n\n        _this3._disconnect(reason, needReconnect);\n\n        if (_this3._reconnect === true) {\n          _this3._reconnecting = true;\n          var interval = _this3._getRetryInterval();\n\n          _this3._debug('reconnect after ' + interval + ' milliseconds');\n          setTimeout(function () {\n            if (_this3._reconnect === true) {\n              if (_this3._refreshRequired) {\n                _this3._refresh();\n              } else {\n                _this3._connect();\n              }\n            }\n          }, interval);\n        }\n      };\n\n      this._transport.onmessage = function (event) {\n        _this3._dataReceived(event.data);\n      };\n    }\n  }, {\n    key: 'rpc',\n    value: function rpc(data) {\n      var _this4 = this;\n\n      var msg = {\n        method: this._methodType.RPC,\n        params: {\n          data: data\n        }\n      };\n      return this._call(msg).then(function (result) {\n        if (result.next) {\n          result.next();\n        }\n        return _this4._decoder.decodeCommandResult(_this4._methodType.RPC, result.result);\n      });\n    }\n  }, {\n    key: 'send',\n    value: function send(data) {\n      var msg = {\n        method: this._methodType.SEND,\n        params: {\n          data: data\n        }\n      };\n\n      return this._callAsync(msg);\n    }\n  }, {\n    key: '_dataReceived',\n    value: function _dataReceived(data) {\n      var _this5 = this;\n\n      var replies = this._decoder.decodeReplies(data);\n      // we have to guarantee order of events in replies processing - i.e. start processing\n      // next reply only when we finished processing of current one. Without syncing things in\n      // this way we could get wrong publication events order as reply promises resolve\n      // on next loop tick so for loop continues before we finished emitting all reply events.\n      var p = Promise.resolve();\n\n      var _loop = function _loop(i) {\n        if (replies.hasOwnProperty(i)) {\n          p = p.then(function () {\n            return _this5._dispatchReply(replies[i]);\n          });\n        }\n      };\n\n      for (var i in replies) {\n        _loop(i);\n      }\n      this._restartPing();\n    }\n  }, {\n    key: '_callAsync',\n    value: function _callAsync(msg) {\n      this._addMessage(msg, true);\n    }\n  }, {\n    key: '_call',\n    value: function _call(msg) {\n      var _this6 = this;\n\n      return new global.Promise(function (resolve, reject) {\n        var id = _this6._addMessage(msg);\n        _this6._registerCall(id, resolve, reject);\n      });\n    }\n  }, {\n    key: '_connect',\n    value: function _connect() {\n      if (this.isConnected()) {\n        this._debug('connect called when already connected');\n        return;\n      }\n      if (this._status === 'connecting') {\n        return;\n      }\n\n      this._debug('start connecting');\n      this._setStatus('connecting');\n      this._clientID = null;\n      this._reconnect = true;\n      this._setupTransport();\n    }\n  }, {\n    key: '_disconnect',\n    value: function _disconnect(reason, shouldReconnect) {\n\n      if (this._isDisconnected()) {\n        return;\n      }\n\n      this._debug('disconnected:', reason, shouldReconnect);\n\n      var reconnect = shouldReconnect || false;\n\n      if (reconnect === false) {\n        this._reconnect = false;\n      }\n\n      this._clearConnectedState(reconnect);\n\n      if (!this._isDisconnected()) {\n        this._setStatus('disconnected');\n        if (this._refreshTimeout) {\n          clearTimeout(this._refreshTimeout);\n          this._refreshTimeout = null;\n        }\n        if (this._reconnecting === false) {\n          this.emit('disconnect', {\n            reason: reason,\n            reconnect: reconnect\n          });\n        }\n      }\n\n      if (!this._transportClosed) {\n        this._transport.close();\n      }\n    }\n  }, {\n    key: '_refreshFailed',\n    value: function _refreshFailed() {\n      this._numRefreshFailed = 0;\n      if (!this._isDisconnected()) {\n        this._disconnect('refresh failed', false);\n      }\n      if (this._config.onRefreshFailed !== null) {\n        this._config.onRefreshFailed();\n      }\n    }\n  }, {\n    key: '_refresh',\n    value: function _refresh() {\n      var _this7 = this;\n\n      // ask application for new connection token.\n      this._debug('refresh token');\n\n      if (this._config.refreshAttempts === 0) {\n        this._debug('refresh attempts set to 0, do not send refresh request at all');\n        this._refreshFailed();\n        return;\n      }\n\n      if (this._refreshTimeout !== null) {\n        clearTimeout(this._refreshTimeout);\n        this._refreshTimeout = null;\n      }\n\n      var cb = function cb(resp) {\n        if (resp.error || resp.status !== 200) {\n          // We don't perform any connection status related actions here as we are\n          // relying on server that must close connection eventually.\n          if (resp.error) {\n            _this7._debug('error refreshing connection token', resp.error);\n          } else {\n            _this7._debug('error refreshing connection token: wrong status code', resp.status);\n          }\n          _this7._numRefreshFailed++;\n          if (_this7._refreshTimeout !== null) {\n            clearTimeout(_this7._refreshTimeout);\n            _this7._refreshTimeout = null;\n          }\n          if (_this7._config.refreshAttempts !== null && _this7._numRefreshFailed >= _this7._config.refreshAttempts) {\n            _this7._refreshFailed();\n            return;\n          }\n          var jitter = Math.round(Math.random() * 1000 * Math.max(_this7._numRefreshFailed, 20));\n          var interval = _this7._config.refreshInterval + jitter;\n          _this7._refreshTimeout = setTimeout(function () {\n            return _this7._refresh();\n          }, interval);\n          return;\n        }\n        _this7._numRefreshFailed = 0;\n        _this7._token = resp.data.token;\n        if (!_this7._token) {\n          _this7._refreshFailed();\n          return;\n        }\n        if (_this7._isDisconnected() && _this7._reconnect) {\n          _this7._debug('token refreshed, connect from scratch');\n          _this7._connect();\n        } else {\n          _this7._debug('send refreshed token');\n          var msg = {\n            method: _this7._methodType.REFRESH,\n            params: {\n              token: _this7._token\n            }\n          };\n          _this7._call(msg).then(function (result) {\n            _this7._refreshResponse(_this7._decoder.decodeCommandResult(_this7._methodType.REFRESH, result.result));\n            if (result.next) {\n              result.next();\n            }\n          }, function (err) {\n            _this7._refreshError(err);\n          });\n        }\n      };\n\n      if (this._config.onRefresh !== null) {\n        var context = {};\n        this._config.onRefresh(context, cb);\n      } else {\n        this._ajax(this._config.refreshEndpoint, this._config.refreshParams, this._config.refreshHeaders, this._config.refreshData, cb);\n      }\n    }\n  }, {\n    key: '_refreshError',\n    value: function _refreshError(err) {\n      var _this8 = this;\n\n      this._debug('refresh error', err);\n      if (this._refreshTimeout) {\n        clearTimeout(this._refreshTimeout);\n        this._refreshTimeout = null;\n      }\n      var interval = this._config.refreshInterval + Math.round(Math.random() * 1000);\n      this._refreshTimeout = setTimeout(function () {\n        return _this8._refresh();\n      }, interval);\n    }\n  }, {\n    key: '_refreshResponse',\n    value: function _refreshResponse(result) {\n      var _this9 = this;\n\n      if (this._refreshTimeout) {\n        clearTimeout(this._refreshTimeout);\n        this._refreshTimeout = null;\n      }\n      if (result.expires) {\n        this._clientID = result.client;\n        this._refreshTimeout = setTimeout(function () {\n          return _this9._refresh();\n        }, result.ttl * 1000);\n      }\n    }\n  }, {\n    key: '_subRefresh',\n    value: function _subRefresh(channel) {\n      var _this10 = this;\n\n      this._debug('refresh subscription token for channel', channel);\n\n      if (this._subRefreshTimeouts[channel] !== undefined) {\n        this._clearSubRefreshTimeout(channel);\n      } else {\n        return;\n      }\n\n      var cb = function cb(resp) {\n        if (resp.error || resp.status !== 200) {\n          return;\n        }\n\n        var channelsData = {};\n        if (resp.data.channels) {\n          for (var i in data.channels) {\n            var channelData = resp.data.channels[i];\n            if (!channelData.channel) {\n              continue;\n            }\n            channelsData[channelData.channel] = channelData.token;\n          }\n        }\n\n        var token = channelsData[channel];\n        if (!token) {\n          return;\n        }\n        var msg = {\n          method: _this10._methodType.SUB_REFRESH,\n          params: {\n            channel: channel,\n            token: token\n          }\n        };\n\n        var sub = _this10._getSub(channel);\n        if (sub === null) {\n          return;\n        }\n\n        _this10._call(msg).then(function (result) {\n          _this10._subRefreshResponse(channel, _this10._decoder.decodeCommandResult(_this10._methodType.SUB_REFRESH, result.result));\n          if (result.next) {\n            result.next();\n          }\n        }, function (err) {\n          _this10._subRefreshError(channel, err);\n        });\n      };\n\n      var data = {\n        client: this._clientID,\n        channels: [channel]\n      };\n\n      if (this._config.onPrivateSubscribe !== null) {\n        this._config.onPrivateSubscribe({\n          data: data\n        }, cb);\n      } else {\n        this._ajax(this._config.subscribeEndpoint, this._config.subscribeParams, this._config.subscribeHeaders, data, cb);\n      }\n    }\n  }, {\n    key: '_clearSubRefreshTimeout',\n    value: function _clearSubRefreshTimeout(channel) {\n      if (this._subRefreshTimeouts[channel] !== undefined) {\n        clearTimeout(this._subRefreshTimeouts[channel]);\n        delete this._subRefreshTimeouts[channel];\n      }\n    }\n  }, {\n    key: '_subRefreshError',\n    value: function _subRefreshError(channel, err) {\n      var _this11 = this;\n\n      this._debug('subscription refresh error', channel, err);\n      this._clearSubRefreshTimeout(channel);\n      var sub = this._getSub(channel);\n      if (sub === null) {\n        return;\n      }\n      var jitter = Math.round(Math.random() * 1000);\n      var subRefreshTimeout = setTimeout(function () {\n        return _this11._subRefresh(channel);\n      }, this._config.subRefreshInterval + jitter);\n      this._subRefreshTimeouts[channel] = subRefreshTimeout;\n      return;\n    }\n  }, {\n    key: '_subRefreshResponse',\n    value: function _subRefreshResponse(channel, result) {\n      var _this12 = this;\n\n      this._debug('subscription refresh success', channel);\n      this._clearSubRefreshTimeout(channel);\n      var sub = this._getSub(channel);\n      if (sub === null) {\n        return;\n      }\n      if (result.expires === true) {\n        var subRefreshTimeout = setTimeout(function () {\n          return _this12._subRefresh(channel);\n        }, result.ttl * 1000);\n        this._subRefreshTimeouts[channel] = subRefreshTimeout;\n      }\n      return;\n    }\n  }, {\n    key: '_subscribe',\n    value: function _subscribe(sub, isResubscribe) {\n      var _this13 = this;\n\n      this._debug('subscribing on', sub.channel);\n      var channel = sub.channel;\n\n      if (!(channel in this._subs)) {\n        this._subs[channel] = sub;\n      }\n\n      if (!this.isConnected()) {\n        // subscribe will be called later\n        sub._setNew();\n        return;\n      }\n\n      sub._setSubscribing(isResubscribe);\n\n      var msg = {\n        method: this._methodType.SUBSCRIBE,\n        params: {\n          channel: channel\n        }\n      };\n\n      // If channel name does not start with privateChannelPrefix - then we\n      // can just send subscription message to Centrifuge. If channel name\n      // starts with privateChannelPrefix - then this is a private channel\n      // and we should ask web application backend for permission first.\n      if ((0, _utils.startsWith)(channel, this._config.privateChannelPrefix)) {\n        // private channel.\n        if (this._isSubscribeBatching) {\n          this._privateChannels[channel] = true;\n        } else {\n          this.startSubscribeBatching();\n          this._subscribe(sub);\n          this.stopSubscribeBatching();\n        }\n      } else {\n        var recover = sub._needRecover();\n\n        if (recover === true) {\n          msg.params.recover = true;\n          var seq = this._getLastSeq(channel);\n          if (seq) {\n            msg.params.seq = seq;\n          }\n          var gen = this._getLastGen(channel);\n          if (gen) {\n            msg.params.gen = gen;\n          }\n          var epoch = this._getLastEpoch(channel);\n          if (epoch) {\n            msg.params.epoch = epoch;\n          }\n        }\n\n        this._call(msg).then(function (result) {\n          _this13._subscribeResponse(channel, _this13._decoder.decodeCommandResult(_this13._methodType.SUBSCRIBE, result.result));\n          if (result.next) {\n            result.next();\n          }\n        }, function (err) {\n          _this13._subscribeError(channel, err);\n        });\n      }\n    }\n  }, {\n    key: '_unsubscribe',\n    value: function _unsubscribe(sub) {\n      if (this.isConnected()) {\n        // No need to unsubscribe in disconnected state - i.e. client already unsubscribed.\n        this._addMessage({\n          method: this._methodType.UNSUBSCRIBE,\n          params: {\n            channel: sub.channel\n          }\n        });\n      }\n    }\n  }, {\n    key: 'getSub',\n    value: function getSub(channel) {\n      return this._getSub(channel);\n    }\n  }, {\n    key: '_getSub',\n    value: function _getSub(channel) {\n      var sub = this._subs[channel];\n      if (!sub) {\n        return null;\n      }\n      return sub;\n    }\n  }, {\n    key: '_connectResponse',\n    value: function _connectResponse(result) {\n      var _this14 = this;\n\n      var wasReconnecting = this._reconnecting;\n      this._reconnecting = false;\n      this._resetRetry();\n\n      if (this.isConnected()) {\n        return;\n      }\n\n      if (this._latencyStart !== null) {\n        this._latency = new Date().getTime() - this._latencyStart.getTime();\n        this._latencyStart = null;\n      }\n\n      this._clientID = result.client;\n      this._setStatus('connected');\n\n      if (this._refreshTimeout) {\n        clearTimeout(this._refreshTimeout);\n      }\n\n      if (result.expires) {\n        this._refreshTimeout = setTimeout(function () {\n          return _this14._refresh();\n        }, result.ttl * 1000);\n      }\n\n      this.startBatching();\n      this.startSubscribeBatching();\n      for (var channel in this._subs) {\n        if (this._subs.hasOwnProperty(channel)) {\n          var sub = this._subs[channel];\n          if (sub._shouldResubscribe()) {\n            this._subscribe(sub, wasReconnecting);\n          }\n        }\n      }\n      this.stopSubscribeBatching();\n      this.stopBatching();\n\n      this._startPing();\n\n      var ctx = {\n        client: result.client,\n        transport: this._transportName,\n        latency: this._latency\n      };\n      if (result.data) {\n        ctx.data = result.data;\n      }\n\n      this.emit('connect', ctx);\n    }\n  }, {\n    key: '_stopPing',\n    value: function _stopPing() {\n      if (this._pongTimeout !== null) {\n        clearTimeout(this._pongTimeout);\n        this._pongTimeout = null;\n      }\n      if (this._pingTimeout !== null) {\n        clearTimeout(this._pingTimeout);\n        this._pingTimeout = null;\n      }\n    }\n  }, {\n    key: '_startPing',\n    value: function _startPing() {\n      var _this15 = this;\n\n      if (this._config.ping !== true || this._config.pingInterval <= 0) {\n        return;\n      }\n      if (!this.isConnected()) {\n        return;\n      }\n\n      this._pingTimeout = setTimeout(function () {\n        if (!_this15.isConnected()) {\n          _this15._stopPing();\n          return;\n        }\n        _this15.ping();\n        _this15._pongTimeout = setTimeout(function () {\n          _this15._disconnect('no ping', true);\n        }, _this15._config.pongWaitTimeout);\n      }, this._config.pingInterval);\n    }\n  }, {\n    key: '_restartPing',\n    value: function _restartPing() {\n      this._stopPing();\n      this._startPing();\n    }\n  }, {\n    key: '_subscribeError',\n    value: function _subscribeError(channel, error) {\n      var sub = this._getSub(channel);\n      if (!sub) {\n        return;\n      }\n      if (!sub._isSubscribing()) {\n        return;\n      }\n      if (error.code === 0 && error.message === _errorTimeout) {\n        // client side timeout.\n        this._disconnect('timeout', true);\n        return;\n      }\n      sub._setSubscribeError(error);\n    }\n  }, {\n    key: '_subscribeResponse',\n    value: function _subscribeResponse(channel, result) {\n      var _this16 = this;\n\n      var sub = this._getSub(channel);\n      if (!sub) {\n        return;\n      }\n      if (!sub._isSubscribing()) {\n        return;\n      }\n\n      var recovered = false;\n      if ('recovered' in result) {\n        recovered = result.recovered;\n      }\n      sub._setSubscribeSuccess(recovered);\n\n      var pubs = result.publications;\n\n      if (pubs && pubs.length > 0) {\n        // handle missed pubs.\n        pubs = pubs.reverse();\n        for (var i in pubs) {\n          if (pubs.hasOwnProperty(i)) {\n            this._handlePublication(channel, pubs[i]);\n          }\n        }\n      } else {\n        if (result.recoverable) {\n          this._lastSeq[channel] = result.seq || 0;\n          this._lastGen[channel] = result.gen || 0;\n        }\n      }\n\n      this._lastEpoch[channel] = result.epoch || '';\n\n      if (result.recoverable) {\n        sub._recoverable = true;\n      }\n\n      if (result.expires === true) {\n        var subRefreshTimeout = setTimeout(function () {\n          return _this16._subRefresh(channel);\n        }, result.ttl * 1000);\n        this._subRefreshTimeouts[channel] = subRefreshTimeout;\n      }\n    }\n  }, {\n    key: '_handleReply',\n    value: function _handleReply(reply, next) {\n      var id = reply.id;\n      var result = reply.result;\n\n      if (!(id in this._callbacks)) {\n        return;\n      }\n      var callbacks = this._callbacks[id];\n      clearTimeout(this._callbacks[id].timeout);\n      delete this._callbacks[id];\n\n      if (!(0, _utils.errorExists)(reply)) {\n        var callback = callbacks.callback;\n        if (!callback) {\n          return;\n        }\n        callback({ result: result, next: next });\n      } else {\n        var errback = callbacks.errback;\n        if (!errback) {\n          return;\n        }\n        errback(reply.error);\n      }\n    }\n  }, {\n    key: '_handleJoin',\n    value: function _handleJoin(channel, join) {\n      var sub = this._getSub(channel);\n      if (!sub) {\n        return;\n      }\n      sub.emit('join', join);\n    }\n  }, {\n    key: '_handleLeave',\n    value: function _handleLeave(channel, leave) {\n      var sub = this._getSub(channel);\n      if (!sub) {\n        return;\n      }\n      sub.emit('leave', leave);\n    }\n  }, {\n    key: '_handleUnsub',\n    value: function _handleUnsub(channel, unsub) {\n      var sub = this._getSub(channel);\n      if (!sub) {\n        return;\n      }\n      sub.unsubscribe();\n      if (unsub.resubscribe === true) {\n        sub.subscribe();\n      }\n    }\n  }, {\n    key: '_handlePublication',\n    value: function _handlePublication(channel, pub) {\n      var sub = this._getSub(channel);\n      if (!sub) {\n        return;\n      }\n      if (pub.seq !== undefined) {\n        this._lastSeq[channel] = pub.seq;\n      }\n      if (pub.gen !== undefined) {\n        this._lastGen[channel] = pub.gen;\n      }\n      sub.emit('publish', pub);\n    }\n  }, {\n    key: '_handleMessage',\n    value: function _handleMessage(message) {\n      this.emit('message', message.data);\n    }\n  }, {\n    key: '_handlePush',\n    value: function _handlePush(data, next) {\n      var push = this._decoder.decodePush(data);\n      var type = 0;\n      if ('type' in push) {\n        type = push['type'];\n      }\n      var channel = push.channel;\n\n      if (type === this._pushType.PUBLICATION) {\n        var pub = this._decoder.decodePushData(this._pushType.PUBLICATION, push.data);\n        this._handlePublication(channel, pub);\n      } else if (type === this._pushType.MESSAGE) {\n        var message = this._decoder.decodePushData(this._pushType.MESSAGE, push.data);\n        this._handleMessage(message);\n      } else if (type === this._pushType.JOIN) {\n        var join = this._decoder.decodePushData(this._pushType.JOIN, push.data);\n        this._handleJoin(channel, join);\n      } else if (type === this._pushType.LEAVE) {\n        var leave = this._decoder.decodePushData(this._pushType.LEAVE, push.data);\n        this._handleLeave(channel, leave);\n      } else if (type === this._pushType.UNSUB) {\n        var unsub = this._decoder.decodePushData(this._pushType.UNSUB, push.data);\n        this._handleUnsub(channel, unsub);\n      }\n      next();\n    }\n  }, {\n    key: '_dispatchReply',\n    value: function _dispatchReply(reply) {\n      var next;\n      var p = new Promise(function (resolve) {\n        next = resolve;\n      });\n\n      if (reply === undefined || reply === null) {\n        this._debug('dispatch: got undefined or null reply');\n        next();\n        return p;\n      }\n\n      var id = reply.id;\n\n      if (id && id > 0) {\n        this._handleReply(reply, next);\n      } else {\n        this._handlePush(reply.result, next);\n      }\n\n      return p;\n    }\n  }, {\n    key: '_flush',\n    value: function _flush() {\n      var messages = this._messages.slice(0);\n      this._messages = [];\n      this._transportSend(messages);\n    }\n  }, {\n    key: '_ping',\n    value: function _ping() {\n      var _this17 = this;\n\n      var msg = {\n        method: this._methodType.PING\n      };\n      this._call(msg).then(function (result) {\n        _this17._pingResponse(_this17._decoder.decodeCommandResult(_this17._methodType.PING, result.result));\n        result.next();\n      }, function (err) {\n        _this17._debug('ping error', err);\n      });\n    }\n  }, {\n    key: '_pingResponse',\n    value: function _pingResponse(result) {\n      if (!this.isConnected()) {\n        return;\n      }\n      this._stopPing();\n      this._startPing();\n    }\n  }, {\n    key: '_getLastSeq',\n    value: function _getLastSeq(channel) {\n      var lastSeq = this._lastSeq[channel];\n      if (lastSeq) {\n        return lastSeq;\n      }\n      return 0;\n    }\n  }, {\n    key: '_getLastGen',\n    value: function _getLastGen(channel) {\n      var lastGen = this._lastGen[channel];\n      if (lastGen) {\n        return lastGen;\n      }\n      return 0;\n    }\n  }, {\n    key: '_getLastEpoch',\n    value: function _getLastEpoch(channel) {\n      var lastEpoch = this._lastEpoch[channel];\n      if (lastEpoch) {\n        return lastEpoch;\n      }\n      return '';\n    }\n  }, {\n    key: '_createErrorObject',\n    value: function _createErrorObject(message, code) {\n      var errObject = {\n        message: message,\n        code: code || 0\n      };\n\n      return errObject;\n    }\n  }, {\n    key: '_registerCall',\n    value: function _registerCall(id, callback, errback) {\n      var _this18 = this;\n\n      this._callbacks[id] = {\n        callback: callback,\n        errback: errback,\n        timeout: null\n      };\n      this._callbacks[id].timeout = setTimeout(function () {\n        delete _this18._callbacks[id];\n        if ((0, _utils.isFunction)(errback)) {\n          errback(_this18._createErrorObject(_errorTimeout));\n        }\n      }, this._config.timeout);\n    }\n  }, {\n    key: '_addMessage',\n    value: function _addMessage(message, async) {\n      var id = void 0;\n      if (!async) {\n        id = this._nextMessageId();\n        message.id = id;\n      }\n      if (this._isBatching === true) {\n        this._messages.push(message);\n      } else {\n        this._transportSend([message]);\n      }\n      if (!async) {\n        return id;\n      }\n      return 0;\n    }\n  }, {\n    key: 'isConnected',\n    value: function isConnected() {\n      return this._isConnected();\n    }\n  }, {\n    key: 'connect',\n    value: function connect() {\n      this._connect();\n    }\n  }, {\n    key: 'disconnect',\n    value: function disconnect() {\n      this._disconnect('client', false);\n    }\n  }, {\n    key: 'ping',\n    value: function ping() {\n      return this._ping();\n    }\n  }, {\n    key: 'startBatching',\n    value: function startBatching() {\n      // start collecting messages without sending them to Centrifuge until flush\n      // method called\n      this._isBatching = true;\n    }\n  }, {\n    key: 'stopBatching',\n    value: function stopBatching() {\n      this._isBatching = false;\n      this._flush();\n    }\n  }, {\n    key: 'startSubscribeBatching',\n    value: function startSubscribeBatching() {\n      // start collecting private channels to create bulk authentication\n      // request to subscribeEndpoint when stopSubscribeBatching will be called\n      this._isSubscribeBatching = true;\n    }\n  }, {\n    key: 'stopSubscribeBatching',\n    value: function stopSubscribeBatching() {\n      var _this19 = this;\n\n      // create request to subscribeEndpoint with collected private channels\n      // to ask if this client can subscribe on each channel\n      this._isSubscribeBatching = false;\n      var authChannels = this._privateChannels;\n      this._privateChannels = {};\n\n      var channels = [];\n\n      for (var channel in authChannels) {\n        if (authChannels.hasOwnProperty(channel)) {\n          var sub = this._getSub(channel);\n          if (!sub) {\n            continue;\n          }\n          channels.push(channel);\n        }\n      }\n\n      if (channels.length === 0) {\n        this._debug('no private channels found, no need to make request');\n        return;\n      }\n\n      var data = {\n        client: this._clientID,\n        channels: channels\n      };\n\n      var cb = function cb(resp) {\n        if (resp.error || resp.status !== 200) {\n          _this19._debug('authorization request failed');\n          for (var i in channels) {\n            if (channels.hasOwnProperty(i)) {\n              var _channel2 = channels[i];\n              _this19._subscribeError(_channel2, _this19._createErrorObject('authorization request failed'));\n            }\n          }\n          return;\n        }\n\n        var channelsData = {};\n        if (resp.data.channels) {\n          for (var _i in resp.data.channels) {\n            var channelData = resp.data.channels[_i];\n            if (!channelData.channel) {\n              continue;\n            }\n            channelsData[channelData.channel] = channelData.token;\n          }\n        }\n\n        // try to send all subscriptions in one request.\n        var batch = false;\n\n        if (!_this19._isBatching) {\n          _this19.startBatching();\n          batch = true;\n        }\n\n        for (var _i2 in channels) {\n          if (channels.hasOwnProperty(_i2)) {\n            var _ret2 = function () {\n              var channel = channels[_i2];\n              var token = channelsData[channel];\n\n              if (!token) {\n                // subscription:error\n                _this19._subscribeError(channel, _this19._createErrorObject('permission denied', 103));\n                return 'continue';\n              } else {\n                var msg = {\n                  method: _this19._methodType.SUBSCRIBE,\n                  params: {\n                    channel: channel,\n                    token: token\n                  }\n                };\n\n                var _sub = _this19._getSub(channel);\n                if (_sub === null) {\n                  return 'continue';\n                }\n\n                var recover = _sub._needRecover();\n\n                if (recover === true) {\n                  msg.params.recover = true;\n                  var seq = _this19._getLastSeq(channel);\n                  if (seq) {\n                    msg.params.seq = seq;\n                  }\n                  var gen = _this19._getLastGen(channel);\n                  if (gen) {\n                    msg.params.gen = gen;\n                  }\n                  var epoch = _this19._getLastEpoch(channel);\n                  if (epoch) {\n                    msg.params.epoch = epoch;\n                  }\n                }\n                _this19._call(msg).then(function (result) {\n                  _this19._subscribeResponse(channel, _this19._decoder.decodeCommandResult(_this19._methodType.SUBSCRIBE, result.result));\n                  if (result.next) {\n                    result.next();\n                  }\n                }, function (err) {\n                  _this19._subscribeError(channel, err);\n                });\n              }\n            }();\n\n            if (_ret2 === 'continue') continue;\n          }\n        }\n\n        if (batch) {\n          _this19.stopBatching();\n        }\n      };\n\n      if (this._config.onPrivateSubscribe !== null) {\n        this._config.onPrivateSubscribe({\n          data: data\n        }, cb);\n      } else {\n        this._ajax(this._config.subscribeEndpoint, this._config.subscribeParams, this._config.subscribeHeaders, data, cb);\n      }\n    }\n  }, {\n    key: 'subscribe',\n    value: function subscribe(channel, events) {\n      var currentSub = this._getSub(channel);\n      if (currentSub !== null) {\n        currentSub._setEvents(events);\n        if (currentSub._isUnsubscribed()) {\n          currentSub.subscribe();\n        }\n        return currentSub;\n      }\n      var sub = new _subscription2.default(this, channel, events);\n      this._subs[channel] = sub;\n      sub.subscribe();\n      return sub;\n    }\n  }]);\n\n  return Centrifuge;\n}(_events2.default);\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\n\n/***/ }),\n\n/***/ 11:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _events = __webpack_require__(6);\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _utils = __webpack_require__(7);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _STATE_NEW = 0;\nvar _STATE_SUBSCRIBING = 1;\nvar _STATE_SUCCESS = 2;\nvar _STATE_ERROR = 3;\nvar _STATE_UNSUBSCRIBED = 4;\n\nvar Subscription = function (_EventEmitter) {\n  _inherits(Subscription, _EventEmitter);\n\n  function Subscription(centrifuge, channel, events) {\n    _classCallCheck(this, Subscription);\n\n    var _this = _possibleConstructorReturn(this, (Subscription.__proto__ || Object.getPrototypeOf(Subscription)).call(this));\n\n    _this.channel = channel;\n    _this._centrifuge = centrifuge;\n    _this._status = _STATE_NEW;\n    _this._error = null;\n    _this._isResubscribe = false;\n    _this._ready = false;\n    _this._subscriptionPromise = null;\n    _this._noResubscribe = false;\n    _this._recoverable = false;\n    _this._recover = false;\n    _this._setEvents(events);\n    _this._initializePromise();\n    _this._promises = {};\n    _this.on('error', function (errContext) {\n      this._centrifuge._debug('subscription error', errContext);\n    });\n    return _this;\n  }\n\n  _createClass(Subscription, [{\n    key: '_initializePromise',\n    value: function _initializePromise() {\n      var _this2 = this;\n\n      // this helps us to wait until subscription will successfully\n      // subscribe and call actions such as presence, history etc in\n      // synchronous way.\n      this._ready = false;\n\n      this._subscriptionPromise = new global.Promise(function (resolve, reject) {\n        _this2._resolve = function (value) {\n          _this2._ready = true;\n          resolve(value);\n        };\n        _this2._reject = function (err) {\n          _this2._ready = true;\n          reject(err);\n        };\n      }).then(function () {}, function () {});\n    }\n  }, {\n    key: '_needRecover',\n    value: function _needRecover() {\n      return this._recoverable === true && this._recover === true;\n    }\n  }, {\n    key: '_setEvents',\n    value: function _setEvents(events) {\n      if (!events) {\n        return;\n      }\n      if ((0, _utils.isFunction)(events)) {\n        // events is just a function to handle publication received from channel.\n        this.on('publish', events);\n      } else if (Object.prototype.toString.call(events) === Object.prototype.toString.call({})) {\n        var knownEvents = ['publish', 'join', 'leave', 'unsubscribe', 'subscribe', 'error'];\n        for (var i = 0, l = knownEvents.length; i < l; i++) {\n          var ev = knownEvents[i];\n          if (ev in events) {\n            this.on(ev, events[ev]);\n          }\n        }\n      }\n    }\n  }, {\n    key: '_isNew',\n    value: function _isNew() {\n      return this._status === _STATE_NEW;\n    }\n  }, {\n    key: '_isUnsubscribed',\n    value: function _isUnsubscribed() {\n      return this._status === _STATE_UNSUBSCRIBED;\n    }\n  }, {\n    key: '_isSubscribing',\n    value: function _isSubscribing() {\n      return this._status === _STATE_SUBSCRIBING;\n    }\n  }, {\n    key: '_isReady',\n    value: function _isReady() {\n      return this._status === _STATE_SUCCESS || this._status === _STATE_ERROR;\n    }\n  }, {\n    key: '_isSuccess',\n    value: function _isSuccess() {\n      return this._status === _STATE_SUCCESS;\n    }\n  }, {\n    key: '_isError',\n    value: function _isError() {\n      return this._status === _STATE_ERROR;\n    }\n  }, {\n    key: '_setNew',\n    value: function _setNew() {\n      this._status = _STATE_NEW;\n    }\n  }, {\n    key: '_setSubscribing',\n    value: function _setSubscribing(isResubscribe) {\n      this._isResubscribe = isResubscribe || false;\n      if (this._ready === true) {\n        // new promise for this subscription\n        this._initializePromise();\n      }\n      this._status = _STATE_SUBSCRIBING;\n    }\n  }, {\n    key: '_setSubscribeSuccess',\n    value: function _setSubscribeSuccess(recovered) {\n      if (this._status === _STATE_SUCCESS) {\n        return;\n      }\n      this._status = _STATE_SUCCESS;\n      var successContext = this._getSubscribeSuccessContext(recovered);\n\n      this._recover = false;\n      this.emit('subscribe', successContext);\n      this._resolve(successContext);\n      for (var to in this._promises) {\n        clearTimeout(to);\n        this._promises[to].resolve();\n        delete this._promises[to];\n      }\n    }\n  }, {\n    key: '_setSubscribeError',\n    value: function _setSubscribeError(err) {\n      if (this._status === _STATE_ERROR) {\n        return;\n      }\n      this._status = _STATE_ERROR;\n      this._error = err;\n      var errContext = this._getSubscribeErrorContext();\n      this.emit('error', errContext);\n      this._reject(errContext);\n      for (var to in this._promises) {\n        clearTimeout(to);\n        this._promises[to].reject(err);\n        delete this._promises[to];\n      }\n    }\n  }, {\n    key: '_triggerUnsubscribe',\n    value: function _triggerUnsubscribe() {\n      this.emit('unsubscribe', {\n        channel: this.channel\n      });\n    }\n  }, {\n    key: '_setUnsubscribed',\n    value: function _setUnsubscribed(noResubscribe) {\n      this._centrifuge._clearSubRefreshTimeout(this.channel);\n      if (this._status === _STATE_UNSUBSCRIBED) {\n        return;\n      }\n      var needTrigger = this._status === _STATE_SUCCESS;\n      this._status = _STATE_UNSUBSCRIBED;\n      if (noResubscribe === true) {\n        this._recover = false;\n        this._noResubscribe = true;\n        delete this._centrifuge._lastSeq[this.channel];\n        delete this._centrifuge._lastGen[this.channel];\n        delete this._centrifuge._lastEpoch[this.channel];\n      }\n      if (needTrigger) {\n        this._triggerUnsubscribe();\n      }\n    }\n  }, {\n    key: '_shouldResubscribe',\n    value: function _shouldResubscribe() {\n      return !this._noResubscribe;\n    }\n  }, {\n    key: '_getSubscribeSuccessContext',\n    value: function _getSubscribeSuccessContext(recovered) {\n      return {\n        channel: this.channel,\n        isResubscribe: this._isResubscribe,\n        recovered: recovered\n      };\n    }\n  }, {\n    key: '_getSubscribeErrorContext',\n    value: function _getSubscribeErrorContext() {\n      var subscribeErrorContext = this._error;\n      subscribeErrorContext.channel = this.channel;\n      subscribeErrorContext.isResubscribe = this._isResubscribe;\n      return subscribeErrorContext;\n    }\n  }, {\n    key: 'ready',\n    value: function ready(callback, errback) {\n      if (this._ready) {\n        if (this._isSuccess()) {\n          callback(this._getSubscribeSuccessContext());\n        } else {\n          errback(this._getSubscribeErrorContext());\n        }\n      }\n    }\n  }, {\n    key: 'subscribe',\n    value: function subscribe() {\n      if (this._status === _STATE_SUCCESS) {\n        return;\n      }\n      this._noResubscribe = false;\n      this._centrifuge._subscribe(this);\n    }\n  }, {\n    key: 'unsubscribe',\n    value: function unsubscribe() {\n      this._setUnsubscribed(true);\n      this._centrifuge._unsubscribe(this);\n    }\n  }, {\n    key: '_methodCall',\n    value: function _methodCall(message, type) {\n      var _this3 = this;\n\n      var methodCallPromise = new Promise(function (resolve, reject) {\n        var subPromise = void 0;\n        if (_this3._isSuccess()) {\n          subPromise = Promise.resolve();\n        } else if (_this3._isError()) {\n          subPromise = Promise.reject(_this3._error);\n        } else {\n          subPromise = new Promise(function (res, rej) {\n            var timeout = setTimeout(function () {\n              rej({ 'code': 0, 'message': 'timeout' });\n            }, _this3._centrifuge._config.timeout);\n            _this3._promises[timeout] = {\n              resolve: res,\n              reject: rej\n            };\n          });\n        }\n        subPromise.then(function () {\n          return _this3._centrifuge._call(message).then(function (result) {\n            resolve(_this3._centrifuge._decoder.decodeCommandResult(type, result.result));\n            if (result.next) {\n              result.next();\n            }\n          }, function (error) {\n            reject(error);\n          });\n        }, function (error) {\n          reject(error);\n        });\n      });\n      return methodCallPromise;\n    }\n  }, {\n    key: 'publish',\n    value: function publish(data) {\n      return this._methodCall({\n        method: this._centrifuge._methodType.PUBLISH,\n        params: {\n          channel: this.channel,\n          data: data\n        }\n      }, this._centrifuge._methodType.PUBLISH);\n    }\n  }, {\n    key: 'presence',\n    value: function presence() {\n      return this._methodCall({\n        method: this._centrifuge._methodType.PRESENCE,\n        params: {\n          channel: this.channel\n        }\n      }, this._centrifuge._methodType.PRESENCE);\n    }\n  }, {\n    key: 'presenceStats',\n    value: function presenceStats() {\n      return this._methodCall({\n        method: this._centrifuge._methodType.PRESENCE_STATS,\n        params: {\n          channel: this.channel\n        }\n      }, this._centrifuge._methodType.PRESENCE_STATS);\n    }\n  }, {\n    key: 'history',\n    value: function history() {\n      return this._methodCall({\n        method: this._centrifuge._methodType.HISTORY,\n        params: {\n          channel: this.channel\n        }\n      }, this._centrifuge._methodType.HISTORY);\n    }\n  }]);\n\n  return Subscription;\n}(_events2.default);\n\nexports.default = Subscription;\nmodule.exports = exports['default'];\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\n\n/***/ }),\n\n/***/ 12:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar JsonMethodType = exports.JsonMethodType = {\n  CONNECT: 0,\n  SUBSCRIBE: 1,\n  UNSUBSCRIBE: 2,\n  PUBLISH: 3,\n  PRESENCE: 4,\n  PRESENCE_STATS: 5,\n  HISTORY: 6,\n  PING: 7,\n  SEND: 8,\n  RPC: 9,\n  REFRESH: 10,\n  SUB_REFRESH: 11\n};\n\nvar JsonPushType = exports.JsonPushType = {\n  PUBLICATION: 0,\n  JOIN: 1,\n  LEAVE: 2,\n  UNSUB: 3,\n  MESSAGE: 4\n};\n\nvar JsonEncoder = exports.JsonEncoder = function () {\n  function JsonEncoder() {\n    _classCallCheck(this, JsonEncoder);\n  }\n\n  _createClass(JsonEncoder, [{\n    key: 'encodeCommands',\n    value: function encodeCommands(commands) {\n      var encodedCommands = [];\n      for (var i in commands) {\n        if (commands.hasOwnProperty(i)) {\n          encodedCommands.push(JSON.stringify(commands[i]));\n        }\n      }\n      return encodedCommands.join('\\n');\n    }\n  }]);\n\n  return JsonEncoder;\n}();\n\nvar JsonDecoder = exports.JsonDecoder = function () {\n  function JsonDecoder() {\n    _classCallCheck(this, JsonDecoder);\n  }\n\n  _createClass(JsonDecoder, [{\n    key: 'decodeReplies',\n    value: function decodeReplies(data) {\n      var replies = [];\n      var encodedReplies = data.split('\\n');\n      for (var i in encodedReplies) {\n        if (encodedReplies.hasOwnProperty(i)) {\n          if (!encodedReplies[i]) {\n            continue;\n          }\n          var reply = JSON.parse(encodedReplies[i]);\n          replies.push(reply);\n        }\n      }\n      return replies;\n    }\n  }, {\n    key: 'decodeCommandResult',\n    value: function decodeCommandResult(methodType, data) {\n      return data;\n    }\n  }, {\n    key: 'decodePush',\n    value: function decodePush(data) {\n      return data;\n    }\n  }, {\n    key: 'decodePushData',\n    value: function decodePushData(pushType, data) {\n      return data;\n    }\n  }]);\n\n  return JsonDecoder;\n}();\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ }),\n\n/***/ 31:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _centrifuge = __webpack_require__(10);\n\nexports.default = _centrifuge.Centrifuge;\nmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 6:\n/***/ (function(module, exports) {\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n\n/***/ }),\n\n/***/ 7:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.startsWith = startsWith;\nexports.isFunction = isFunction;\nexports.log = log;\nexports.backoff = backoff;\nexports.errorExists = errorExists;\nfunction startsWith(value, prefix) {\n  return value.lastIndexOf(prefix, 0) === 0;\n};\n\nfunction isFunction(value) {\n  if (value === undefined || value === null) {\n    return false;\n  }\n  return typeof value === 'function';\n};\n\nfunction log(level, args) {\n  if (global.console) {\n    var logger = global.console[level];\n\n    if (isFunction(logger)) {\n      logger.apply(global.console, args);\n    }\n  }\n};\n\nfunction backoff(step, min, max) {\n  var jitter = 0.5 * Math.random();\n  var interval = Math.min(max, min * Math.pow(2, step + 1));\n\n  return Math.floor((1 - jitter) * interval);\n};\n\nfunction errorExists(data) {\n  return 'error' in data && data.error !== null;\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\n\n/***/ })\n\n/******/ });\n});\n\n\n// WEBPACK FOOTER //\n// centrifuge.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 31);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 252f1caf800245971920","import EventEmitter from 'events';\nimport Subscription from './subscription';\n\nimport {\n  JsonEncoder,\n  JsonDecoder,\n  JsonMethodType,\n  JsonPushType\n} from './json';\n\nimport {\n  isFunction,\n  log,\n  startsWith,\n  errorExists,\n  backoff\n} from './utils';\n\nconst _errorTimeout = 'timeout';\n\nexport class Centrifuge extends EventEmitter {\n\n  constructor(url, options) {\n    super();\n    this._url = url;\n    this._sockjs = null;\n    this._isSockjs = false;\n    this._binary = false;\n    this._methodType = null;\n    this._pushType = null;\n    this._encoder = null;\n    this._decoder = null;\n    this._status = 'disconnected';\n    this._reconnect = true;\n    this._reconnecting = false;\n    this._transport = null;\n    this._transportName = null;\n    this._transportClosed = true;\n    this._messageId = 0;\n    this._clientID = null;\n    this._refreshRequired = false;\n    this._subs = {};\n    this._lastSeq = {};\n    this._lastGen = {};\n    this._lastEpoch = {};\n    this._messages = [];\n    this._isBatching = false;\n    this._isSubscribeBatching = false;\n    this._privateChannels = {};\n    this._numRefreshFailed = 0;\n    this._refreshTimeout = null;\n    this._pingTimeout = null;\n    this._pongTimeout = null;\n    this._subRefreshTimeouts = {};\n    this._retries = 0;\n    this._callbacks = {};\n    this._latency = null;\n    this._latencyStart = null;\n    this._connectData = null;\n    this._token = null;\n    this._config = {\n      debug: false,\n      sockjs: null,\n      promise: null,\n      minRetry: 1000,\n      maxRetry: 20000,\n      timeout: 5000,\n      ping: true,\n      pingInterval: 25000,\n      pongWaitTimeout: 5000,\n      privateChannelPrefix: '$',\n      onTransportClose: null,\n      sockjsServer: null,\n      sockjsTransports: [\n        'websocket',\n        'xdr-streaming',\n        'xhr-streaming',\n        'eventsource',\n        'iframe-eventsource',\n        'iframe-htmlfile',\n        'xdr-polling',\n        'xhr-polling',\n        'iframe-xhr-polling',\n        'jsonp-polling'\n      ],\n      refreshEndpoint: '/centrifuge/refresh',\n      refreshHeaders: {},\n      refreshParams: {},\n      refreshData: {},\n      refreshAttempts: null,\n      refreshInterval: 1000,\n      onRefreshFailed: null,\n      onRefresh: null,\n      subscribeEndpoint: '/centrifuge/subscribe',\n      subscribeHeaders: {},\n      subscribeParams: {},\n      subRefreshInterval: 1000,\n      onPrivateSubscribe: null\n    };\n    this._configure(options);\n  }\n\n  setToken(token) {\n    this._token = token;\n  }\n\n  setConnectData(data) {\n    this._connectData = data;\n  }\n\n  _ajax(url, params, headers, data, callback) {\n    let query = '';\n    this._debug('sending AJAX request to', url, 'with data', JSON.stringify(data));\n\n    const xhr = (global.XMLHttpRequest ? new global.XMLHttpRequest() : new global.ActiveXObject('Microsoft.XMLHTTP'));\n\n    for (const i in params) {\n      if (params.hasOwnProperty(i)) {\n        if (query.length > 0) {\n          query += '&';\n        }\n        query += encodeURIComponent(i) + '=' + encodeURIComponent(params[i]);\n      }\n    }\n    if (query.length > 0) {\n      query = '?' + query;\n    }\n    xhr.open('POST', url + query, true);\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials = true;\n    }\n\n    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n    xhr.setRequestHeader('Content-Type', 'application/json');\n    for (const headerName in headers) {\n      if (headers.hasOwnProperty(headerName)) {\n        xhr.setRequestHeader(headerName, headers[headerName]);\n      }\n    }\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n          let data, parsed = false;\n          try {\n            data = JSON.parse(xhr.responseText);\n            parsed = true;\n          } catch (e) {\n            callback({\n              error: 'Invalid JSON. Data was: ' + xhr.responseText,\n              status: 200,\n              data: null\n            });\n          }\n          if (parsed) { // prevents double execution.\n            callback({\n              data: data,\n              status: 200\n            });\n          }\n        } else {\n          this._log('wrong status code in AJAX response', xhr.status);\n          callback({\n            status: xhr.status,\n            data: null\n          });\n        }\n      }\n    };\n    setTimeout(() => xhr.send(JSON.stringify(data)), 20);\n    return xhr;\n  };\n\n  _log() {\n    log('info', arguments);\n  };\n\n  _debug() {\n    if (this._config.debug === true) {\n      log('debug', arguments);\n    }\n  };\n\n  _websocketSupported() {\n    return !(typeof WebSocket !== 'function' && typeof WebSocket !== 'object');\n  };\n\n  _setFormat(format) {\n    if (this._formatOverride(format)) {\n      return;\n    }\n    if (format === 'protobuf') {\n      throw new Error('not implemented by JSON only Centrifuge client – use client with Protobuf');\n    }\n    this._binary = false;\n    this._methodType = JsonMethodType;\n    this._pushType = JsonPushType;\n    this._encoder = new JsonEncoder();\n    this._decoder = new JsonDecoder();\n  }\n\n  _formatOverride(format) {\n    return false;\n  }\n\n  _configure(configuration) {\n    if (!('Promise' in global)) {\n      throw new Error('Promise polyfill required');\n    }\n\n    Object.assign(this._config, configuration || {});\n    this._debug('centrifuge config', this._config);\n\n    if (!this._url) {\n      throw new Error('url required');\n    }\n\n    if (startsWith(this._url, 'ws') && this._url.indexOf('format=protobuf') > -1) {\n      this._setFormat('protobuf');\n    } else {\n      this._setFormat('json');\n    }\n\n    if (startsWith(this._url, 'http')) {\n      this._debug('client will try to connect to SockJS endpoint');\n      if (this._config.sockjs !== null) {\n        this._debug('SockJS explicitly provided in options');\n        this._sockjs = this._config.sockjs;\n      } else {\n        if (typeof global.SockJS === 'undefined') {\n          throw new Error('SockJS not found, use ws:// in url or include SockJS');\n        }\n        this._debug('use globally defined SockJS');\n        this._sockjs = global.SockJS;\n      }\n    } else {\n      this._debug('client will connect to websocket endpoint');\n    }\n  };\n\n  _setStatus(newStatus) {\n    if (this._status !== newStatus) {\n      this._debug('Status', this._status, '->', newStatus);\n      this._status = newStatus;\n    }\n  };\n\n  _isDisconnected() {\n    return this._status === 'disconnected';\n  };\n\n  _isConnecting() {\n    return this._status === 'connecting';\n  };\n\n  _isConnected() {\n    return this._status === 'connected';\n  };\n\n  _nextMessageId() {\n    return ++this._messageId;\n  };\n\n  _resetRetry() {\n    this._debug('reset retries count to 0');\n    this._retries = 0;\n  };\n\n  _getRetryInterval() {\n    const interval = backoff(this._retries, this._config.minRetry, this._config.maxRetry);\n\n    this._retries += 1;\n    return interval;\n  };\n\n  _clearConnectedState(reconnect) {\n    this._clientID = null;\n    this._stopPing();\n\n    // fire errbacks of registered outgoing calls.\n    for (const id in this._callbacks) {\n      if (this._callbacks.hasOwnProperty(id)) {\n        const callbacks = this._callbacks[id];\n        clearTimeout(callbacks.timeout);\n        const errback = callbacks.errback;\n        if (!errback) {\n          continue;\n        }\n        errback(this._createErrorObject('disconnected'));\n      }\n    }\n    this._callbacks = {};\n\n    // fire unsubscribe events\n    for (const channel in this._subs) {\n      if (this._subs.hasOwnProperty(channel)) {\n        const sub = this._subs[channel];\n\n        if (reconnect) {\n          if (sub._isSuccess()) {\n            sub._triggerUnsubscribe();\n            sub._recover = true;\n          }\n          sub._setSubscribing();\n        } else {\n          sub._setUnsubscribed();\n        }\n      }\n    }\n\n    // clear refresh timer\n    if (this._refreshTimeout !== null) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n\n    // clear sub refresh timers\n    for (const channel in this._subRefreshTimeouts) {\n      if (this._subRefreshTimeouts.hasOwnProperty(channel) && this._subRefreshTimeouts[channel]) {\n        this._clearSubRefreshTimeout(channel);\n      }\n    }\n    this._subRefreshTimeouts = {};\n\n    if (!this._reconnect) {\n      // completely clear subscriptions\n      this._subs = {};\n    }\n  };\n\n  _transportSend(commands) {\n    if (!commands.length) {\n      return;\n    }\n    if (!this._transport) {\n      throw new Error('transport not connected');\n    }\n    this._transport.send(this._encoder.encodeCommands(commands));\n  }\n\n  _setupTransport() {\n    this._isSockjs = false;\n\n    // detect transport to use - SockJS or Websocket\n    if (this._sockjs !== null) {\n      const sockjsOptions = {\n        transports: this._config.sockjsTransports\n      };\n\n      if (this._config.sockjsServer !== null) {\n        sockjsOptions.server = this._config.sockjsServer;\n      }\n      this._isSockjs = true;\n      this._transport = new this._sockjs(this._url, null, sockjsOptions);\n    } else {\n      if (!this._websocketSupported()) {\n        this._debug('No Websocket support and no SockJS configured, can not connect');\n        return;\n      }\n      this._transport = new WebSocket(this._url);\n      if (this._binary === true) {\n        this._transport.binaryType = 'arraybuffer';\n      }\n    }\n\n    this._transport.onopen = () => {\n      this._transportClosed = false;\n\n      if (this._isSockjs) {\n        this._transportName = 'sockjs-' + this._transport.transport;\n        this._transport.onheartbeat = () => this._restartPing();\n      } else {\n        this._transportName = 'websocket';\n      }\n\n      // Can omit method here due to zero value.\n      const msg = {\n        // method: this._methodType.CONNECT\n      };\n\n      if (this._token || this._connectData) {\n        msg.params = {};\n      }\n\n      if (this._token) {\n        msg.params.token = this._token;\n      }\n\n      if (this._connectData) {\n        msg.params.data = this._connectData;\n      }\n\n      this._latencyStart = new Date();\n      this._call(msg).then(result => {\n        this._connectResponse(this._decoder.decodeCommandResult(this._methodType.CONNECT, result.result));\n        if (result.next) {\n          result.next();\n        }\n      }, err => {\n        if (err.code === 109) { // token expired.\n          this._refreshRequired = true;\n        }\n        this._disconnect('connect error', true);\n      });\n    };\n\n    this._transport.onerror = error => {\n      this._debug('transport level error', error);\n    };\n\n    this._transport.onclose = closeEvent => {\n      this._transportClosed = true;\n      let reason = 'connection closed';\n      let needReconnect = true;\n\n      if (closeEvent && 'reason' in closeEvent && closeEvent.reason) {\n        try {\n          const advice = JSON.parse(closeEvent.reason);\n          this._debug('reason is an advice object', advice);\n          reason = advice.reason;\n          needReconnect = advice.reconnect;\n        } catch (e) {\n          reason = closeEvent.reason;\n          this._debug('reason is a plain string', reason);\n        }\n      }\n\n      // onTransportClose callback should be executed every time transport was closed.\n      // This can be helpful to catch failed connection events (because our disconnect\n      // event only called once and every future attempts to connect do not fire disconnect\n      // event again).\n      if (this._config.onTransportClose !== null) {\n        this._config.onTransportClose({\n          event: closeEvent,\n          reason: reason,\n          reconnect: needReconnect\n        });\n      }\n\n      this._disconnect(reason, needReconnect);\n\n      if (this._reconnect === true) {\n        this._reconnecting = true;\n        const interval = this._getRetryInterval();\n\n        this._debug('reconnect after ' + interval + ' milliseconds');\n        setTimeout(() => {\n          if (this._reconnect === true) {\n            if (this._refreshRequired) {\n              this._refresh();\n            } else {\n              this._connect();\n            }\n          }\n        }, interval);\n      }\n    };\n\n    this._transport.onmessage = event => {\n      this._dataReceived(event.data);\n    };\n  };\n\n  rpc(data) {\n    const msg = {\n      method: this._methodType.RPC,\n      params: {\n        data: data\n      }\n    };\n    return this._call(msg).then(result => {\n      if (result.next) {\n        result.next();\n      }\n      return this._decoder.decodeCommandResult(this._methodType.RPC, result.result);\n    });\n  }\n\n  send(data) {\n    const msg = {\n      method: this._methodType.SEND,\n      params: {\n        data: data\n      }\n    };\n\n    return this._callAsync(msg);\n  }\n\n  _dataReceived(data) {\n    const replies = this._decoder.decodeReplies(data);\n    // we have to guarantee order of events in replies processing - i.e. start processing\n    // next reply only when we finished processing of current one. Without syncing things in\n    // this way we could get wrong publication events order as reply promises resolve\n    // on next loop tick so for loop continues before we finished emitting all reply events.\n    let p = Promise.resolve();\n    for (const i in replies) {\n      if (replies.hasOwnProperty(i)) {\n        p = p.then(() => {\n          return this._dispatchReply(replies[i]);\n        });\n      }\n    }\n    this._restartPing();\n  }\n\n  _callAsync(msg) {\n    this._addMessage(msg, true);\n  }\n\n  _call(msg) {\n    return new global.Promise((resolve, reject) => {\n      const id = this._addMessage(msg);\n      this._registerCall(id, resolve, reject);\n    });\n  }\n\n  _connect() {\n    if (this.isConnected()) {\n      this._debug('connect called when already connected');\n      return;\n    }\n    if (this._status === 'connecting') {\n      return;\n    }\n\n    this._debug('start connecting');\n    this._setStatus('connecting');\n    this._clientID = null;\n    this._reconnect = true;\n    this._setupTransport();\n  };\n\n  _disconnect(reason, shouldReconnect) {\n\n    if (this._isDisconnected()) {\n      return;\n    }\n\n    this._debug('disconnected:', reason, shouldReconnect);\n\n    const reconnect = shouldReconnect || false;\n\n    if (reconnect === false) {\n      this._reconnect = false;\n    }\n\n    this._clearConnectedState(reconnect);\n\n    if (!this._isDisconnected()) {\n      this._setStatus('disconnected');\n      if (this._refreshTimeout) {\n        clearTimeout(this._refreshTimeout);\n        this._refreshTimeout = null;\n      }\n      if (this._reconnecting === false) {\n        this.emit('disconnect', {\n          reason: reason,\n          reconnect: reconnect\n        });\n      }\n    }\n\n    if (!this._transportClosed) {\n      this._transport.close();\n    }\n  };\n\n  _refreshFailed() {\n    this._numRefreshFailed = 0;\n    if (!this._isDisconnected()) {\n      this._disconnect('refresh failed', false);\n    }\n    if (this._config.onRefreshFailed !== null) {\n      this._config.onRefreshFailed();\n    }\n  };\n\n  _refresh() {\n    // ask application for new connection token.\n    this._debug('refresh token');\n\n    if (this._config.refreshAttempts === 0) {\n      this._debug('refresh attempts set to 0, do not send refresh request at all');\n      this._refreshFailed();\n      return;\n    }\n\n    if (this._refreshTimeout !== null) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n\n    const cb = (resp) => {\n      if (resp.error || resp.status !== 200) {\n        // We don't perform any connection status related actions here as we are\n        // relying on server that must close connection eventually.\n        if (resp.error) {\n          this._debug('error refreshing connection token', resp.error);\n        } else {\n          this._debug('error refreshing connection token: wrong status code', resp.status);\n        }\n        this._numRefreshFailed++;\n        if (this._refreshTimeout !== null) {\n          clearTimeout(this._refreshTimeout);\n          this._refreshTimeout = null;\n        }\n        if (this._config.refreshAttempts !== null && this._numRefreshFailed >= this._config.refreshAttempts) {\n          this._refreshFailed();\n          return;\n        }\n        const jitter = Math.round(Math.random() * 1000 * Math.max(this._numRefreshFailed, 20));\n        const interval = this._config.refreshInterval + jitter;\n        this._refreshTimeout = setTimeout(() => this._refresh(), interval);\n        return;\n      }\n      this._numRefreshFailed = 0;\n      this._token = resp.data.token;\n      if (!this._token) {\n        this._refreshFailed();\n        return;\n      }\n      if (this._isDisconnected() && this._reconnect) {\n        this._debug('token refreshed, connect from scratch');\n        this._connect();\n      } else {\n        this._debug('send refreshed token');\n        const msg = {\n          method: this._methodType.REFRESH,\n          params: {\n            token: this._token\n          }\n        };\n        this._call(msg).then(result => {\n          this._refreshResponse(this._decoder.decodeCommandResult(this._methodType.REFRESH, result.result));\n          if (result.next) {\n            result.next();\n          }\n        }, err => {\n          this._refreshError(err);\n        });\n      }\n    };\n\n    if (this._config.onRefresh !== null) {\n      const context = {};\n      this._config.onRefresh(context, cb);\n    } else {\n      this._ajax(\n        this._config.refreshEndpoint,\n        this._config.refreshParams,\n        this._config.refreshHeaders,\n        this._config.refreshData,\n        cb\n      );\n    }\n  };\n\n  _refreshError(err) {\n    this._debug('refresh error', err);\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n    const interval = this._config.refreshInterval + Math.round(Math.random() * 1000);\n    this._refreshTimeout = setTimeout(() => this._refresh(), interval);\n  }\n\n  _refreshResponse(result) {\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n    if (result.expires) {\n      this._clientID = result.client;\n      this._refreshTimeout = setTimeout(() => this._refresh(), result.ttl * 1000);\n    }\n  };\n\n  _subRefresh(channel) {\n    this._debug('refresh subscription token for channel', channel);\n\n    if (this._subRefreshTimeouts[channel] !== undefined) {\n      this._clearSubRefreshTimeout(channel);\n    } else {\n      return;\n    }\n\n    const cb = (resp) => {\n      if (resp.error || resp.status !== 200) {\n        return;\n      }\n\n      let channelsData = {};\n      if (resp.data.channels) {\n        for (const i in data.channels) {\n          const channelData = resp.data.channels[i];\n          if (!channelData.channel) {\n            continue;\n          }\n          channelsData[channelData.channel] = channelData.token;\n        }\n      }\n\n      const token = channelsData[channel];\n      if (!token) {\n        return;\n      }\n      const msg = {\n        method: this._methodType.SUB_REFRESH,\n        params: {\n          channel: channel,\n          token: token\n        }\n      };\n\n      const sub = this._getSub(channel);\n      if (sub === null) {\n        return;\n      }\n\n      this._call(msg).then(result => {\n        this._subRefreshResponse(\n          channel,\n          this._decoder.decodeCommandResult(this._methodType.SUB_REFRESH, result.result)\n        );\n        if (result.next) {\n          result.next();\n        }\n      }, err => {\n        this._subRefreshError(channel, err);\n      });\n    };\n\n    const data = {\n      client: this._clientID,\n      channels: [channel]\n    };\n\n    if (this._config.onPrivateSubscribe !== null) {\n      this._config.onPrivateSubscribe({\n        data: data\n      }, cb);\n    } else {\n      this._ajax(this._config.subscribeEndpoint, this._config.subscribeParams, this._config.subscribeHeaders, data, cb);\n    }\n  };\n\n  _clearSubRefreshTimeout(channel) {\n    if (this._subRefreshTimeouts[channel] !== undefined) {\n      clearTimeout(this._subRefreshTimeouts[channel]);\n      delete this._subRefreshTimeouts[channel];\n    }\n  }\n\n  _subRefreshError(channel, err) {\n    this._debug('subscription refresh error', channel, err);\n    this._clearSubRefreshTimeout(channel);\n    const sub = this._getSub(channel);\n    if (sub === null) {\n      return;\n    }\n    const jitter = Math.round(Math.random() * 1000);\n    let subRefreshTimeout = setTimeout(() => this._subRefresh(channel), this._config.subRefreshInterval + jitter);\n    this._subRefreshTimeouts[channel] = subRefreshTimeout;\n    return;\n  }\n\n  _subRefreshResponse(channel, result) {\n    this._debug('subscription refresh success', channel);\n    this._clearSubRefreshTimeout(channel);\n    const sub = this._getSub(channel);\n    if (sub === null) {\n      return;\n    }\n    if (result.expires === true) {\n      let subRefreshTimeout = setTimeout(() => this._subRefresh(channel), result.ttl * 1000);\n      this._subRefreshTimeouts[channel] = subRefreshTimeout;\n    }\n    return;\n  };\n\n  _subscribe(sub, isResubscribe) {\n    this._debug('subscribing on', sub.channel);\n    const channel = sub.channel;\n\n    if (!(channel in this._subs)) {\n      this._subs[channel] = sub;\n    }\n\n    if (!this.isConnected()) {\n      // subscribe will be called later\n      sub._setNew();\n      return;\n    }\n\n    sub._setSubscribing(isResubscribe);\n\n    const msg = {\n      method: this._methodType.SUBSCRIBE,\n      params: {\n        channel: channel\n      }\n    };\n\n    // If channel name does not start with privateChannelPrefix - then we\n    // can just send subscription message to Centrifuge. If channel name\n    // starts with privateChannelPrefix - then this is a private channel\n    // and we should ask web application backend for permission first.\n    if (startsWith(channel, this._config.privateChannelPrefix)) {\n      // private channel.\n      if (this._isSubscribeBatching) {\n        this._privateChannels[channel] = true;\n      } else {\n        this.startSubscribeBatching();\n        this._subscribe(sub);\n        this.stopSubscribeBatching();\n      }\n    } else {\n      const recover = sub._needRecover();\n\n      if (recover === true) {\n        msg.params.recover = true;\n        const seq = this._getLastSeq(channel);\n        if (seq) {\n          msg.params.seq = seq;\n        }\n        const gen = this._getLastGen(channel);\n        if (gen) {\n          msg.params.gen = gen;\n        }\n        const epoch = this._getLastEpoch(channel);\n        if (epoch) {\n          msg.params.epoch = epoch;\n        }\n      }\n\n      this._call(msg).then(result => {\n        this._subscribeResponse(channel, this._decoder.decodeCommandResult(this._methodType.SUBSCRIBE, result.result));\n        if (result.next) {\n          result.next();\n        }\n      }, err => {\n        this._subscribeError(channel, err);\n      });\n    }\n  };\n\n  _unsubscribe(sub) {\n    if (this.isConnected()) {\n      // No need to unsubscribe in disconnected state - i.e. client already unsubscribed.\n      this._addMessage({\n        method: this._methodType.UNSUBSCRIBE,\n        params: {\n          channel: sub.channel\n        }\n      });\n    }\n  };\n\n  getSub(channel) {\n    return this._getSub(channel);\n  }\n\n  _getSub(channel) {\n    const sub = this._subs[channel];\n    if (!sub) {\n      return null;\n    }\n    return sub;\n  };\n\n  _connectResponse(result) {\n    const wasReconnecting = this._reconnecting;\n    this._reconnecting = false;\n    this._resetRetry();\n\n    if (this.isConnected()) {\n      return;\n    }\n\n    if (this._latencyStart !== null) {\n      this._latency = (new Date()).getTime() - this._latencyStart.getTime();\n      this._latencyStart = null;\n    }\n\n    this._clientID = result.client;\n    this._setStatus('connected');\n\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n    }\n\n    if (result.expires) {\n      this._refreshTimeout = setTimeout(() => this._refresh(), result.ttl * 1000);\n    }\n\n    this.startBatching();\n    this.startSubscribeBatching();\n    for (const channel in this._subs) {\n      if (this._subs.hasOwnProperty(channel)) {\n        const sub = this._subs[channel];\n        if (sub._shouldResubscribe()) {\n          this._subscribe(sub, wasReconnecting);\n        }\n      }\n    }\n    this.stopSubscribeBatching();\n    this.stopBatching();\n\n    this._startPing();\n\n    const ctx = {\n      client: result.client,\n      transport: this._transportName,\n      latency: this._latency\n    };\n    if (result.data) {\n      ctx.data = result.data;\n    }\n\n    this.emit('connect', ctx);\n  };\n\n  _stopPing() {\n    if (this._pongTimeout !== null) {\n      clearTimeout(this._pongTimeout);\n      this._pongTimeout = null;\n    }\n    if (this._pingTimeout !== null) {\n      clearTimeout(this._pingTimeout);\n      this._pingTimeout = null;\n    }\n  };\n\n  _startPing() {\n    if (this._config.ping !== true || this._config.pingInterval <= 0) {\n      return;\n    }\n    if (!this.isConnected()) {\n      return;\n    }\n\n    this._pingTimeout = setTimeout(() => {\n      if (!this.isConnected()) {\n        this._stopPing();\n        return;\n      }\n      this.ping();\n      this._pongTimeout = setTimeout(() => {\n        this._disconnect('no ping', true);\n      }, this._config.pongWaitTimeout);\n    }, this._config.pingInterval);\n  };\n\n  _restartPing() {\n    this._stopPing();\n    this._startPing();\n  };\n\n  _subscribeError(channel, error) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    if (!sub._isSubscribing()) {\n      return;\n    }\n    if (error.code === 0 && error.message === _errorTimeout) { // client side timeout.\n      this._disconnect('timeout', true);\n      return;\n    }\n    sub._setSubscribeError(error);\n  };\n\n  _subscribeResponse(channel, result) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    if (!sub._isSubscribing()) {\n      return;\n    }\n\n    let recovered = false;\n    if ('recovered' in result) {\n      recovered = result.recovered;\n    }\n    sub._setSubscribeSuccess(recovered);\n\n    let pubs = result.publications;\n\n    if (pubs && pubs.length > 0) {\n      // handle missed pubs.\n      pubs = pubs.reverse();\n      for (let i in pubs) {\n        if (pubs.hasOwnProperty(i)) {\n          this._handlePublication(channel, pubs[i]);\n        }\n      }\n    } else {\n      if (result.recoverable) {\n        this._lastSeq[channel] = result.seq || 0;\n        this._lastGen[channel] = result.gen || 0;\n      }\n    }\n\n    this._lastEpoch[channel] = result.epoch || '';\n\n    if (result.recoverable) {\n      sub._recoverable = true;\n    }\n\n    if (result.expires === true) {\n      let subRefreshTimeout = setTimeout(() => this._subRefresh(channel), result.ttl * 1000);\n      this._subRefreshTimeouts[channel] = subRefreshTimeout;\n    }\n  };\n\n  _handleReply(reply, next) {\n    const id = reply.id;\n    const result = reply.result;\n\n    if (!(id in this._callbacks)) {\n      return;\n    }\n    const callbacks = this._callbacks[id];\n    clearTimeout(this._callbacks[id].timeout);\n    delete this._callbacks[id];\n\n    if (!errorExists(reply)) {\n      const callback = callbacks.callback;\n      if (!callback) {\n        return;\n      }\n      callback({result, next});\n    } else {\n      const errback = callbacks.errback;\n      if (!errback) {\n        return;\n      }\n      errback(reply.error);\n    }\n  }\n\n  _handleJoin(channel, join) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    sub.emit('join', join);\n  };\n\n  _handleLeave(channel, leave) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    sub.emit('leave', leave);\n  };\n\n  _handleUnsub(channel, unsub) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    sub.unsubscribe();\n    if (unsub.resubscribe === true) {\n      sub.subscribe();\n    }\n  };\n\n  _handlePublication(channel, pub) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    if (pub.seq !== undefined) {\n      this._lastSeq[channel] = pub.seq;\n    }\n    if (pub.gen !== undefined) {\n      this._lastGen[channel] = pub.gen;\n    }\n    sub.emit('publish', pub);\n  };\n\n  _handleMessage(message) {\n    this.emit('message', message.data);\n  };\n\n  _handlePush(data, next) {\n    const push = this._decoder.decodePush(data);\n    let type = 0;\n    if ('type' in push) {\n      type = push['type'];\n    }\n    const channel = push.channel;\n\n    if (type === this._pushType.PUBLICATION) {\n      const pub = this._decoder.decodePushData(this._pushType.PUBLICATION, push.data);\n      this._handlePublication(channel, pub);\n    } else if (type === this._pushType.MESSAGE) {\n      const message = this._decoder.decodePushData(this._pushType.MESSAGE, push.data);\n      this._handleMessage(message);\n    } else if (type === this._pushType.JOIN) {\n      const join = this._decoder.decodePushData(this._pushType.JOIN, push.data);\n      this._handleJoin(channel, join);\n    } else if (type === this._pushType.LEAVE) {\n      const leave = this._decoder.decodePushData(this._pushType.LEAVE, push.data);\n      this._handleLeave(channel, leave);\n    } else if (type === this._pushType.UNSUB) {\n      const unsub = this._decoder.decodePushData(this._pushType.UNSUB, push.data);\n      this._handleUnsub(channel, unsub);\n    }\n    next();\n  }\n\n  _dispatchReply(reply) {\n    var next;\n    const p = new Promise(resolve =>{\n      next = resolve;\n    });\n\n    if (reply === undefined || reply === null) {\n      this._debug('dispatch: got undefined or null reply');\n      next();\n      return p;\n    }\n\n    const id = reply.id;\n\n    if (id && id > 0) {\n      this._handleReply(reply, next);\n    } else {\n      this._handlePush(reply.result, next);\n    }\n\n    return p;\n  };\n\n  _flush() {\n    const messages = this._messages.slice(0);\n    this._messages = [];\n    this._transportSend(messages);\n  };\n\n  _ping() {\n    const msg = {\n      method: this._methodType.PING\n    };\n    this._call(msg).then(result => {\n      this._pingResponse(this._decoder.decodeCommandResult(this._methodType.PING, result.result));\n      result.next();\n    }, err => {\n      this._debug('ping error', err);\n    });\n  };\n\n  _pingResponse(result) {\n    if (!this.isConnected()) {\n      return;\n    }\n    this._stopPing();\n    this._startPing();\n  }\n\n  _getLastSeq(channel) {\n    const lastSeq = this._lastSeq[channel];\n    if (lastSeq) {\n      return lastSeq;\n    }\n    return 0;\n  };\n\n  _getLastGen(channel) {\n    const lastGen = this._lastGen[channel];\n    if (lastGen) {\n      return lastGen;\n    }\n    return 0;\n  };\n\n  _getLastEpoch(channel) {\n    const lastEpoch = this._lastEpoch[channel];\n    if (lastEpoch) {\n      return lastEpoch;\n    }\n    return '';\n  };\n\n  _createErrorObject(message, code) {\n    const errObject = {\n      message: message,\n      code: code || 0\n    };\n\n    return errObject;\n  };\n\n  _registerCall(id, callback, errback) {\n    this._callbacks[id] = {\n      callback: callback,\n      errback: errback,\n      timeout: null\n    };\n    this._callbacks[id].timeout = setTimeout(() => {\n      delete this._callbacks[id];\n      if (isFunction(errback)) {\n        errback(this._createErrorObject(_errorTimeout));\n      }\n    }, this._config.timeout);\n  };\n\n  _addMessage(message, async) {\n    let id;\n    if (!async) {\n      id = this._nextMessageId();\n      message.id = id;\n    }\n    if (this._isBatching === true) {\n      this._messages.push(message);\n    } else {\n      this._transportSend([message]);\n    }\n    if (!async) {\n      return id;\n    }\n    return 0;\n  };\n\n  isConnected() {\n    return this._isConnected();\n  }\n\n  connect() {\n    this._connect();\n  };\n\n  disconnect() {\n    this._disconnect('client', false);\n  };\n\n  ping() {\n    return this._ping();\n  }\n\n  startBatching() {\n    // start collecting messages without sending them to Centrifuge until flush\n    // method called\n    this._isBatching = true;\n  };\n\n  stopBatching() {\n    this._isBatching = false;\n    this._flush();\n  };\n\n  startSubscribeBatching() {\n    // start collecting private channels to create bulk authentication\n    // request to subscribeEndpoint when stopSubscribeBatching will be called\n    this._isSubscribeBatching = true;\n  };\n\n  stopSubscribeBatching() {\n    // create request to subscribeEndpoint with collected private channels\n    // to ask if this client can subscribe on each channel\n    this._isSubscribeBatching = false;\n    const authChannels = this._privateChannels;\n    this._privateChannels = {};\n\n    const channels = [];\n\n    for (const channel in authChannels) {\n      if (authChannels.hasOwnProperty(channel)) {\n        const sub = this._getSub(channel);\n        if (!sub) {\n          continue;\n        }\n        channels.push(channel);\n      }\n    }\n\n    if (channels.length === 0) {\n      this._debug('no private channels found, no need to make request');\n      return;\n    }\n\n    const data = {\n      client: this._clientID,\n      channels: channels\n    };\n\n    const cb = (resp) => {\n      if (resp.error || resp.status !== 200) {\n        this._debug('authorization request failed');\n        for (const i in channels) {\n          if (channels.hasOwnProperty(i)) {\n            const channel = channels[i];\n            this._subscribeError(channel, this._createErrorObject('authorization request failed'));\n          }\n        }\n        return;\n      }\n\n      let channelsData = {};\n      if (resp.data.channels) {\n        for (const i in resp.data.channels) {\n          const channelData = resp.data.channels[i];\n          if (!channelData.channel) {\n            continue;\n          }\n          channelsData[channelData.channel] = channelData.token;\n        }\n      }\n\n      // try to send all subscriptions in one request.\n      let batch = false;\n\n      if (!this._isBatching) {\n        this.startBatching();\n        batch = true;\n      }\n\n      for (const i in channels) {\n        if (channels.hasOwnProperty(i)) {\n          const channel = channels[i];\n          const token = channelsData[channel];\n\n          if (!token) {\n            // subscription:error\n            this._subscribeError(channel, this._createErrorObject('permission denied', 103));\n            continue;\n          } else {\n            const msg = {\n              method: this._methodType.SUBSCRIBE,\n              params: {\n                channel: channel,\n                token: token\n              }\n            };\n\n            const sub = this._getSub(channel);\n            if (sub === null) {\n              continue;\n            }\n\n            const recover = sub._needRecover();\n\n            if (recover === true) {\n              msg.params.recover = true;\n              const seq = this._getLastSeq(channel);\n              if (seq) {\n                msg.params.seq = seq;\n              }\n              const gen = this._getLastGen(channel);\n              if (gen) {\n                msg.params.gen = gen;\n              }\n              const epoch = this._getLastEpoch(channel);\n              if (epoch) {\n                msg.params.epoch = epoch;\n              }\n            }\n            this._call(msg).then(result => {\n              this._subscribeResponse(\n                channel,\n                this._decoder.decodeCommandResult(this._methodType.SUBSCRIBE, result.result)\n              );\n              if (result.next) {\n                result.next();\n              }\n            }, err => {\n              this._subscribeError(channel, err);\n            });\n          }\n        }\n      }\n\n      if (batch) {\n        this.stopBatching();\n      }\n\n    };\n\n    if (this._config.onPrivateSubscribe !== null) {\n      this._config.onPrivateSubscribe({\n        data: data\n      }, cb);\n    } else {\n      this._ajax(this._config.subscribeEndpoint, this._config.subscribeParams, this._config.subscribeHeaders, data, cb);\n    }\n  };\n\n  subscribe(channel, events) {\n    const currentSub = this._getSub(channel);\n    if (currentSub !== null) {\n      currentSub._setEvents(events);\n      if (currentSub._isUnsubscribed()) {\n        currentSub.subscribe();\n      }\n      return currentSub;\n    }\n    const sub = new Subscription(this, channel, events);\n    this._subs[channel] = sub;\n    sub.subscribe();\n    return sub;\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/centrifuge.js","import EventEmitter from 'events';\n\nimport {\n  isFunction\n} from './utils';\n\nconst _STATE_NEW = 0;\nconst _STATE_SUBSCRIBING = 1;\nconst _STATE_SUCCESS = 2;\nconst _STATE_ERROR = 3;\nconst _STATE_UNSUBSCRIBED = 4;\n\nexport default class Subscription extends EventEmitter {\n  constructor(centrifuge, channel, events) {\n    super();\n    this.channel = channel;\n    this._centrifuge = centrifuge;\n    this._status = _STATE_NEW;\n    this._error = null;\n    this._isResubscribe = false;\n    this._ready = false;\n    this._subscriptionPromise = null;\n    this._noResubscribe = false;\n    this._recoverable = false;\n    this._recover = false;\n    this._setEvents(events);\n    this._initializePromise();\n    this._promises = {};\n    this.on('error', function (errContext) {\n      this._centrifuge._debug('subscription error', errContext);\n    });\n  }\n\n  _initializePromise() {\n    // this helps us to wait until subscription will successfully\n    // subscribe and call actions such as presence, history etc in\n    // synchronous way.\n    this._ready = false;\n\n    this._subscriptionPromise = new global.Promise((resolve, reject) => {\n      this._resolve = value => {\n        this._ready = true;\n        resolve(value);\n      };\n      this._reject = err => {\n        this._ready = true;\n        reject(err);\n      };\n    }).then(function () {}, function () {});\n  };\n\n  _needRecover() {\n    return this._recoverable === true && this._recover === true;\n  };\n\n  _setEvents(events) {\n    if (!events) {\n      return;\n    }\n    if (isFunction(events)) {\n      // events is just a function to handle publication received from channel.\n      this.on('publish', events);\n    } else if (Object.prototype.toString.call(events) === Object.prototype.toString.call({})) {\n      const knownEvents = ['publish', 'join', 'leave', 'unsubscribe', 'subscribe', 'error'];\n      for (let i = 0, l = knownEvents.length; i < l; i++) {\n        const ev = knownEvents[i];\n        if (ev in events) {\n          this.on(ev, events[ev]);\n        }\n      }\n    }\n  };\n\n  _isNew() {\n    return this._status === _STATE_NEW;\n  };\n\n  _isUnsubscribed() {\n    return this._status === _STATE_UNSUBSCRIBED;\n  };\n\n  _isSubscribing() {\n    return this._status === _STATE_SUBSCRIBING;\n  };\n\n  _isReady() {\n    return this._status === _STATE_SUCCESS || this._status === _STATE_ERROR;\n  };\n\n  _isSuccess() {\n    return this._status === _STATE_SUCCESS;\n  };\n\n  _isError() {\n    return this._status === _STATE_ERROR;\n  };\n\n  _setNew() {\n    this._status = _STATE_NEW;\n  };\n\n  _setSubscribing(isResubscribe) {\n    this._isResubscribe = isResubscribe || false;\n    if (this._ready === true) {\n      // new promise for this subscription\n      this._initializePromise();\n    }\n    this._status = _STATE_SUBSCRIBING;\n  };\n\n  _setSubscribeSuccess(recovered) {\n    if (this._status === _STATE_SUCCESS) {\n      return;\n    }\n    this._status = _STATE_SUCCESS;\n    const successContext = this._getSubscribeSuccessContext(recovered);\n\n    this._recover = false;\n    this.emit('subscribe', successContext);\n    this._resolve(successContext);\n    for (const to in this._promises) {\n      clearTimeout(to);\n      this._promises[to].resolve();\n      delete this._promises[to];\n    }\n  };\n\n  _setSubscribeError(err) {\n    if (this._status === _STATE_ERROR) {\n      return;\n    }\n    this._status = _STATE_ERROR;\n    this._error = err;\n    const errContext = this._getSubscribeErrorContext();\n    this.emit('error', errContext);\n    this._reject(errContext);\n    for (const to in this._promises) {\n      clearTimeout(to);\n      this._promises[to].reject(err);\n      delete this._promises[to];\n    }\n  };\n\n  _triggerUnsubscribe() {\n    this.emit('unsubscribe', {\n      channel: this.channel\n    });\n  };\n\n  _setUnsubscribed(noResubscribe) {\n    this._centrifuge._clearSubRefreshTimeout(this.channel);\n    if (this._status === _STATE_UNSUBSCRIBED) {\n      return;\n    }\n    const needTrigger = this._status === _STATE_SUCCESS;\n    this._status = _STATE_UNSUBSCRIBED;\n    if (noResubscribe === true) {\n      this._recover = false;\n      this._noResubscribe = true;\n      delete this._centrifuge._lastSeq[this.channel];\n      delete this._centrifuge._lastGen[this.channel];\n      delete this._centrifuge._lastEpoch[this.channel];\n    }\n    if (needTrigger) {\n      this._triggerUnsubscribe();\n    }\n  };\n\n  _shouldResubscribe() {\n    return !this._noResubscribe;\n  };\n\n  _getSubscribeSuccessContext(recovered) {\n    return {\n      channel: this.channel,\n      isResubscribe: this._isResubscribe,\n      recovered: recovered\n    };\n  };\n\n  _getSubscribeErrorContext() {\n    const subscribeErrorContext = this._error;\n    subscribeErrorContext.channel = this.channel;\n    subscribeErrorContext.isResubscribe = this._isResubscribe;\n    return subscribeErrorContext;\n  };\n\n  ready(callback, errback) {\n    if (this._ready) {\n      if (this._isSuccess()) {\n        callback(this._getSubscribeSuccessContext());\n      } else {\n        errback(this._getSubscribeErrorContext());\n      }\n    }\n  };\n\n  subscribe() {\n    if (this._status === _STATE_SUCCESS) {\n      return;\n    }\n    this._noResubscribe = false;\n    this._centrifuge._subscribe(this);\n  };\n\n  unsubscribe() {\n    this._setUnsubscribed(true);\n    this._centrifuge._unsubscribe(this);\n  };\n\n  _methodCall(message, type) {\n    const methodCallPromise = new Promise((resolve, reject) => {\n      let subPromise;\n      if (this._isSuccess()) {\n        subPromise = Promise.resolve();\n      } else if (this._isError()) {\n        subPromise = Promise.reject(this._error);\n      } else {\n        subPromise = new Promise((res, rej) => {\n          const timeout = setTimeout(function () {\n            rej({'code': 0, 'message': 'timeout'});\n          }, this._centrifuge._config.timeout);\n          this._promises[timeout] = {\n            resolve: res,\n            reject: rej\n          };\n        });\n      }\n      subPromise.then(\n        () => {\n          return this._centrifuge._call(message).then(\n            result => {\n              resolve(this._centrifuge._decoder.decodeCommandResult(type, result.result));\n              if (result.next) {\n                result.next();\n              }\n            },\n            error => {\n              reject(error);\n            }\n          );\n        },\n        error => {\n          reject(error);\n        }\n      );\n    });\n    return methodCallPromise;\n  }\n\n  publish(data) {\n    return this._methodCall({\n      method: this._centrifuge._methodType.PUBLISH,\n      params: {\n        channel: this.channel,\n        data: data\n      }\n    }, this._centrifuge._methodType.PUBLISH);\n  };\n\n  presence() {\n    return this._methodCall({\n      method: this._centrifuge._methodType.PRESENCE,\n      params: {\n        channel: this.channel\n      }\n    }, this._centrifuge._methodType.PRESENCE);\n  };\n\n  presenceStats() {\n    return this._methodCall({\n      method: this._centrifuge._methodType.PRESENCE_STATS,\n      params: {\n        channel: this.channel\n      }\n    }, this._centrifuge._methodType.PRESENCE_STATS);\n  };\n\n  history() {\n    return this._methodCall({\n      method: this._centrifuge._methodType.HISTORY,\n      params: {\n        channel: this.channel\n      }\n    }, this._centrifuge._methodType.HISTORY);\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/subscription.js","export const JsonMethodType = {\n  CONNECT: 0,\n  SUBSCRIBE: 1,\n  UNSUBSCRIBE: 2,\n  PUBLISH: 3,\n  PRESENCE: 4,\n  PRESENCE_STATS: 5,\n  HISTORY: 6,\n  PING: 7,\n  SEND: 8,\n  RPC: 9,\n  REFRESH: 10,\n  SUB_REFRESH: 11\n};\n\nexport const JsonPushType = {\n  PUBLICATION: 0,\n  JOIN: 1,\n  LEAVE: 2,\n  UNSUB: 3,\n  MESSAGE: 4\n};\n\nexport class JsonEncoder {\n  encodeCommands(commands) {\n    const encodedCommands = [];\n    for (const i in commands) {\n      if (commands.hasOwnProperty(i)) {\n        encodedCommands.push(JSON.stringify(commands[i]));\n      }\n    }\n    return encodedCommands.join('\\n');\n  }\n}\n\nexport class JsonDecoder {\n  decodeReplies(data) {\n    const replies = [];\n    const encodedReplies = data.split('\\n');\n    for (const i in encodedReplies) {\n      if (encodedReplies.hasOwnProperty(i)) {\n        if (!encodedReplies[i]) {\n          continue;\n        }\n        const reply = JSON.parse(encodedReplies[i]);\n        replies.push(reply);\n      }\n    }\n    return replies;\n  }\n\n  decodeCommandResult(methodType, data) {\n    return data;\n  }\n\n  decodePush(data) {\n    return data;\n  }\n\n  decodePushData(pushType, data) {\n    return data;\n  }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/json.js","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 3\n// module chunks = 0 1","import {Centrifuge} from './centrifuge.js';\nexport default Centrifuge;\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/events/events.js\n// module id = 6\n// module chunks = 0 1","export function startsWith(value, prefix) {\n  return value.lastIndexOf(prefix, 0) === 0;\n};\n\nexport function isFunction(value) {\n  if (value === undefined || value === null) {\n    return false;\n  }\n  return typeof value === 'function';\n};\n\nexport function log(level, args) {\n  if (global.console) {\n    const logger = global.console[level];\n\n    if (isFunction(logger)) {\n      logger.apply(global.console, args);\n    }\n  }\n};\n\nexport function backoff(step, min, max) {\n  const jitter = 0.5 * Math.random();\n  const interval = Math.min(max, min * Math.pow(2, step + 1));\n\n  return Math.floor((1 - jitter) * interval);\n};\n\nexport function errorExists(data) {\n  return 'error' in data && data.error !== null;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils.js"],"sourceRoot":""}